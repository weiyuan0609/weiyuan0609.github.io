<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w_y blog</title>
  
  <subtitle>There&#39;s always one for you</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-22T06:33:42.686Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leo Wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何写作</title>
    <link href="http://yoursite.com/2021/03/13/%E5%86%99%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/03/13/写作/</id>
    <published>2021-03-13T15:07:33.000Z</published>
    <updated>2021-03-22T06:33:42.686Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="1-不同职场人士特点、诉求和写作场景"><a href="#1-不同职场人士特点、诉求和写作场景" class="headerlink" title="1. 不同职场人士特点、诉求和写作场景"></a>1. 不同职场人士特点、诉求和写作场景</h2><table><thead><tr><th>职场人士</th><th>诉求</th><th>写作场景</th></tr></thead><tbody><tr><td>职场小兵</td><td>专业技能强，需要简洁有力地从专业视角影响读者；</td><td>需要经常写一些文章分享信息、阐述观点，比如项目进度报告、会议纪要、工作计划、可行性报告。</td></tr><tr><td>职场老兵</td><td>列出工作过程和结果，并把“成果”变成“功劳”，证明自己是未来的管理人才</td><td>运营类报告</td></tr><tr><td>职场管理层</td><td>高层的故事线来组织文章逻辑</td><td>管理类报告，描述清楚商业逻辑，以便公司做出战略决策</td></tr></tbody></table><h2 id="2-通常存在的困惑"><a href="#2-通常存在的困惑" class="headerlink" title="2. 通常存在的困惑"></a>2. 通常存在的困惑</h2><ul><li>工作太忙，需要快速成文的方法</li><li>没受过商务写作的专业训练，分不清商务写作、文学写作、学术写作的清晰界限</li><li>不知道如何从工作中收集一手资料，并从资料上构筑观点</li><li>不知道如何以公司战略为风向标，提出自己的诉求，争取资源</li><li>不知道怎样通过写作，把自己从“做事”的模式，调整为“做贡献”的心态；</li><li>写作时容易用空洞的言辞，缺乏实质内容</li></ul><h2 id="3-“书面沟通”技能的本质"><a href="#3-“书面沟通”技能的本质" class="headerlink" title="3. “书面沟通”技能的本质"></a>3. “书面沟通”技能的本质</h2><p>作为写作者要用大量的信息化语言，在文字上与读者建立起信任，让读者通过单向沟通的形式，读出双向沟通的幻觉，最后双方理性、感性都达成一致。</p><table><thead><tr><th>沟通形式</th><th>单向，作为作者，要通过“单向沟通的形式”，让读者读出“双向沟通的幻觉”（因为没有一个正常的成年人喜欢“被通知、被命令”，大家都喜欢“被商量、被探讨”）</th></tr></thead><tbody><tr><td>沟通的标准</td><td>60 分沟通标准：互相明白对方的意思<br>80  分沟通标准：达成协作，获得想要的结果<br>100分沟通标准：理性和感性都要达成一致</td></tr><tr><td>沟通的基本前提</td><td>“信任”是超越一切沟通形式、一切沟通技巧最基础的前提</td></tr></tbody></table><h2 id="4-课程编排"><a href="#4-课程编排" class="headerlink" title="4. 课程编排"></a>4. 课程编排</h2><p>先道（思想和内容）后术（文字的质感、温度）；<br>先谋篇布局，再润色文字；<br>先把话写清楚了，再把它写精彩了。</p><p>一、二讲：基础课，养成正确的写作习惯——先想（TCS三步构思）后写然后删</p><p>三、四讲：四大思维能力组织文章结构</p><h3 id="4-1-先想再写-TCS（基调、内容、结构）三步构思法"><a href="#4-1-先想再写-TCS（基调、内容、结构）三步构思法" class="headerlink" title="4.1 先想再写-TCS（基调、内容、结构）三步构思法"></a>4.1 先想再写-TCS（基调、内容、结构）三步构思法</h3><h4 id="4-1-1-Tone-基调"><a href="#4-1-1-Tone-基调" class="headerlink" title="4.1.1. Tone-基调"></a>4.1.1. Tone-基调</h4><blockquote><p>基调为王，七种文案的标志性语气；</p><p>清楚每类文章需要传递的价值是确定基调的前提</p></blockquote><p><img src="https://cdn.nlark.com/yuque/__puml/09906306aff86a7f4e074cc22c21a765.svg" alt="img0"></p><p><strong>具体案例和标志性基调</strong></p><table><thead><tr><th>具体文案</th><th>标准基调</th><th>忌</th><th>宜</th></tr></thead><tbody><tr><td>年终总结</td><td>有深度</td><td>×回顾<br>×业绩流水账</td><td>√行动指南<br>√提供难得的一线经验和不同的视角<br>√体现分析能力，将感性认知上升到理性的规律性的总结，协助领导对未来做出正确的决策</td></tr><tr><td>进展汇报</td><td>不讨教</td><td>×只提问题</td><td>√给出方案<br>√汇报公式：我这样做，您同意吗？<br>√呈现解决问题过程中的重要发现、关键结论、阶段性成果等小胜利</td></tr><tr><td>调查报告</td><td>实事求是</td><td>×“我认为”、“我估计”</td><td>√“资料显示”、“数字表明”</td></tr><tr><td>项目计划</td><td>可交付</td><td>×仅仅写行为：“选择外部供应商”、“草拟消费者调查报告”</td><td>√众多可交付结果的总和：“确定外部供应商”、“递交消费者调查报告”<br>√项目计划书按照OKR，即关键结果用来衡量目标是否达成 注：Object（目标）、KeyResult（关键结果）</td></tr><tr><td>请示</td><td>有主见</td><td>×传声筒语气：“他们抱怨”、“他们声称”</td><td>√有主见、有担当的语气：“我注意到”、“我相信我的团队会”<br>√给出量化的标准、如果是选择题，需要提供最佳选项</td></tr><tr><td>批复</td><td>态度明确</td><td>×“似属可行”、“酌情办理”</td></tr></tbody></table><h4 id="4-1-2-Content-内容"><a href="#4-1-2-Content-内容" class="headerlink" title="4.1.2. Content-内容"></a>4.1.2. Content-内容</h4><blockquote><p>原则：从“作者逻辑”切换到“读者逻辑”，提供“所有必需信息”，然后按照“要话先说”的顺序排列。也就是说，文章的每个部分都要对读者有价值。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/__puml/89a1a6a6637e70bbef71bb7ba9d51bd5.svg" alt="img1"></p><h4 id="4-1-3-Structure-结构（金字塔）"><a href="#4-1-3-Structure-结构（金字塔）" class="headerlink" title="4.1.3. Structure-结构（金字塔）"></a>4.1.3. Structure-结构（金字塔）</h4><p>向下想三层，假设变结论</p><h4 id="4-1-4-压缩三分之一的文字"><a href="#4-1-4-压缩三分之一的文字" class="headerlink" title="4.1.4 压缩三分之一的文字"></a>4.1.4 压缩三分之一的文字</h4><p>KISS原则：keep it short and simple</p><ul><li>文字表达要简洁：段落中不能有多余的句子，句中不能有多余的词</li><li><p>内容提供要详实：阐述和实例细节，会让文章更长，但不是冗长<br>三个方法，“减无可减”（简洁的文字体现自律）:</p><ol><li>压缩注水的文字“大概”、“一般来说”、“话说回来”</li><li>删掉“在我看来”、“我认为”、“我相信”，没必要反复提醒读者这是我的观点</li><li>压缩重复的句子</li></ol></li></ul><h2 id="5-日常邮件的高段位写法"><a href="#5-日常邮件的高段位写法" class="headerlink" title="5. 日常邮件的高段位写法"></a>5. 日常邮件的高段位写法</h2><h3 id="5-1-标题-“呼唤你，愉悦你”"><a href="#5-1-标题-“呼唤你，愉悦你”" class="headerlink" title="5.1 标题 | “呼唤你，愉悦你”"></a>5.1 标题 | “呼唤你，愉悦你”</h3><table><thead><tr><th>忌</th><th>宜</th></tr></thead><tbody><tr><td>框架式标题：<br>×《12月3日的培训课程》<br>×《5月12日会议纪要》<br>×《Re:Re:Re:Re:部门会议的筹备》</td><td>√《12月3日——学习成为有效的沟通者》<br>√《5月12日会后行动方案，请批示》<br>√《年度明星员工;Re:部门会议的筹备》</td></tr></tbody></table><h3 id="5-2-开头-有温度、有重点的开门三句话"><a href="#5-2-开头-有温度、有重点的开门三句话" class="headerlink" title="5.2 开头 | 有温度、有重点的开门三句话"></a>5.2 开头 | 有温度、有重点的开门三句话</h3><blockquote><p>根据不同企业收集到的邮件样本，开篇的问题往往不在于没有开门见山，而是前篇一律的机器语言风格。</p><p>写作目的放在前三句中（邮件的第四句已经不算开头了）：</p><p>开头用一句话写出你的个性和感性智慧（沟通需要暖场），然后第二、三句马上进入主题。</p></blockquote><table><thead><tr><th>开头第一句参考版本</th><th>应用场景</th></tr></thead><tbody><tr><td>“祝贺你升级为妈妈，照片上的小宝宝快乐而健康。欢迎你回到我们的队伍。”</td><td>女员工休完产假回到工作岗位</td></tr><tr><td>“嘿，刚才的发言很精彩！”</td><td>某次电话会议之后的邮件开头</td></tr><tr><td>“夏天的贵州很舒爽吧。”</td><td>对方刚刚度完假回来</td></tr><tr><td>“上周的年会获益匪浅，终于和你真人见到面啦。”</td><td>参加对方组织的年会后</td></tr><tr><td>第二、三句马上进入主题</td><td>“我给你发邮件，是想核实一下……”</td></tr></tbody></table><h3 id="5-3-正文-“三个凡是”安排格式，提供读者所有必需信息"><a href="#5-3-正文-“三个凡是”安排格式，提供读者所有必需信息" class="headerlink" title="5.3 正文 | “三个凡是”安排格式，提供读者所有必需信息"></a>5.3 正文 | “三个凡是”安排格式，提供读者所有必需信息</h3><p>内容：TCS三步法中内容要求，提供读者需要知道的所有必需信息（考察对他人需求的敏感度和洞察力）</p><p>格式：三个凡是</p><ol><li>凡是能分段，就分：以段为单位呈现思考逻辑</li><li>凡是能做小标题，就做：小标题是路标，降低读者的阅读难度，同时防止阅读思维不脱轨</li></ol><p>标题之间结构平行：</p><ul><li>窍门一：使用动宾短语（动宾短语是人类语言中最有影响力、最有号召力的结构）</li></ul><p>比如：同盟会的“驱除鞑虏、恢复中华、创立民国、平均地权”；迪士尼的“制造奇迹”；</p><p>“现行的合同条款、协商新条款、谁签署合同”，写成“回顾现行条款、协商新条款、确定签署人”</p><ul><li>窍门二：如有两个动词，可保留一个动词（显得正式，又力透纸背，更有气势）</li></ul><p>比如：“调整结构”，写成“调结构”；“夯实基础”，写成“夯基础”；“振兴集镇”，写成“兴集镇”</p><ol><li>凡是能列清单图表，就列（一图胜千文）</li></ol><blockquote><p>三个凡是不仅为文字创造出“留白”，而且把结构化的思维，视觉化给读者看，善于使用三个凡是的作者，不需要借助下划线或粗黑体，就能将所要强调的内容得以强调，这就是写作的优雅。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2018/jpeg/171735/1541407827245-4a7f5810-efa8-440e-aac9-2f9c30d76484.jpeg?x-oss-process=image%2Fresize%2Cw_300" alt="img3"></p><h3 id="5-4-诉求-清晰的立场和尊重的语气"><a href="#5-4-诉求-清晰的立场和尊重的语气" class="headerlink" title="5.4 诉求 | 清晰的立场和尊重的语气"></a>5.4 诉求 | 清晰的立场和尊重的语气</h3><blockquote><p>诉求这个部分很敏感，不适合前面提到的KISS原则，句子太短，本身就是一种简单粗暴；</p><p>温和而坚定的表达诉求，是自尊度高的人群特定的习惯，是一种理所当然的职场礼仪。</p></blockquote><p>清晰的立场：</p><table><thead><tr><th>忌</th><th>宜</th></tr></thead><tbody><tr><td>×“请各位按时递交表格，否则刘总会责备”</td><td>√“我期待在下午4点之前收到您的表格，尤其是张三和李四二位。如果您是在忙不过来，请提前告知我。我会在3:00~3:30时段电话您，给予帮助。”</td></tr></tbody></table><p>写出尊敬的语气的两个技巧：</p><ul><li>把句子拉长</li><li>用问句把需求写出去。</li></ul><h3 id="5-5-结尾-积极而开放的结尾，引发真正的行动"><a href="#5-5-结尾-积极而开放的结尾，引发真正的行动" class="headerlink" title="5.5 结尾 | 积极而开放的结尾，引发真正的行动"></a>5.5 结尾 | 积极而开放的结尾，引发真正的行动</h3><blockquote><p>积极而开放的结尾，能让读者再一次产生双向沟通的幻觉，降低信任成本。</p></blockquote><p>更积极的结尾：</p><table><thead><tr><th>常规</th><th>更积极</th></tr></thead><tbody><tr><td>“如果你有任何问题，请随时和我联系”</td><td>“我会每周和您更新这个项目的进程。周一我会和您联系，看看您是否有其他问题我可以协助解决。”</td></tr></tbody></table><p>开放式结尾：“我期待能和您在电话里进一步讨论。欢迎您的建议，盼探讨。”</p><h2 id="6-职场写作工具包"><a href="#6-职场写作工具包" class="headerlink" title="6. 职场写作工具包"></a>6. 职场写作工具包</h2><p>金字塔结构</p><blockquote><p>读者结合自身逻辑，套用模板，用信息化语言组织内容，打造高质量文章。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/171735/1552281709970-281f5bd7-6b01-4bea-970a-158c28a883d6.png?x-oss-process=image%2Fresize%2Cw_300" alt="img5"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279338778-f05eb956-8842-4bd8-9efd-33d9d70393dc.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279533844-d1a4dbdd-1e26-4bf1-9688-e9cdb2c3118f.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279549798-657dcd23-f9d4-4de1-b4ef-898393202de2.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279592616-d64e3355-a94f-4d8a-804e-865f91407d52.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279597152-9783a9be-ba2d-49a9-857c-ca52c669fd9b.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/171735/1552279673921-968bad53-05e6-4f60-97d0-ea1f32711a65.jpeg?x-oss-process=image%2Fresize%2Cw_600" alt="img"></p><p>转载自 <a href="https://www.yuque.com/quxiaofeng/vsi4x4/qru9dn#a01772bc" target="_blank" rel="noopener">https://www.yuque.com/quxiaofeng/vsi4x4/qru9dn#a01772bc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-不同职场人士特点、诉求和写作场景&quot;&gt;&lt;a href=&quot;#1-不同职场人士特点、诉求和写作场景&quot; class=&quot;headerlink&quot; title=&quot;1. 不同职场人士特点、诉求和写作场景&quot;&gt;&lt;/a&gt;1. 不同职场人士特点、诉
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="写作" scheme="http://yoursite.com/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>迭代复盘方式</title>
    <link href="http://yoursite.com/2021/01/06/%E8%BF%AD%E4%BB%A3%E5%A4%8D%E7%9B%98/"/>
    <id>http://yoursite.com/2021/01/06/迭代复盘/</id>
    <published>2021-01-06T15:07:33.000Z</published>
    <updated>2021-03-12T06:33:23.282Z</updated>
    
    <content type="html"><![CDATA[<p>迭代复盘方式如下：</p><a id="more"></a><p><img src="/images/diedai.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代复盘方式如下：&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="软技能" scheme="http://yoursite.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>微前端的价值和实践</title>
    <link href="http://yoursite.com/2020/11/23/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E4%BB%B7%E5%80%BC%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2020/11/23/微前端的价值与实践/</id>
    <published>2020-11-23T15:07:33.000Z</published>
    <updated>2021-02-20T09:11:26.475Z</updated>
    
    <content type="html"><![CDATA[<p>考量到目前公司项目多，技术栈杂，体验不太友好，所以花了点时间大概研究了下微前端</p><p>大概分下面几个部分简单阐述下我的理解，算是自我小结吧：</p><ul><li>微前端的简介</li><li>微前端的价值</li><li>微前端需要解决的问题</li><li>微前端的技术选型</li><li>微前端的实践总结</li><li>微前端存在的问题</li></ul><a id="more"></a><h2 id="1-微前端的简介"><a href="#1-微前端的简介" class="headerlink" title="1. 微前端的简介"></a>1. 微前端的简介</h2><p>微前端是一种类似于微服务的架构体系</p><p>它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用</p><p>各个前端应用还可以独立开发、独立部署</p><h2 id="2-微前端的价值"><a href="#2-微前端的价值" class="headerlink" title="2. 微前端的价值"></a>2. 微前端的价值</h2><ul><li>解耦：方便扩展，重构，替换，组合</li></ul><ol><li>旧项目里开发新模块</li><li>新项目怎么架构，在 3-5 年不会变成遗产项目</li><li>与业务组件有什么区别：技术无关</li></ol><ul><li>复用：能力输出</li></ul><p>服务化</p><blockquote><p>复用的层级</p><ul><li>函数逻辑复用（模块化）</li></ul><ol><li>通用方法</li><li>业务方法</li></ol><ul><li>组件复用（组件化）</li></ul><ol><li>通用组件：antd，日期选择组件</li><li>业务组件</li></ol><ul><li>业务块复用（微前端）</li></ul><p>通用业务块：财务，用户信息</p><ul><li>服务化</li></ul><p>编排服务、编排逻辑、编排组件、编排访问策略、编排流程</p></blockquote><h2 id="3-微前端需要解决的问题"><a href="#3-微前端需要解决的问题" class="headerlink" title="3. 微前端需要解决的问题"></a>3. 微前端需要解决的问题</h2><ul><li>微应用的注册、异步加载和生命周期管理；</li><li>微应用之间、主从之间的消息机制；</li><li>微应用之间的安全隔离措施；</li><li>微应用的框架无关、版本无关；</li><li>微应用之间、主从之间的公共依赖的库、业务逻辑(utils)以及版本怎么管理；</li><li>微应用独立调试、和主应用联调的方式，快速定位报错（发射问题）；</li><li>微应用的发布流程；</li><li>微应用打包优化问题；</li><li>微应用专有云场景的出包方案；</li><li>渐进式升级：用微应用方案平滑重构老项目</li></ul><h2 id="4-微前端的技术选型"><a href="#4-微前端的技术选型" class="headerlink" title="4. 微前端的技术选型"></a>4. 微前端的技术选型</h2><ul><li><p>服务端集成：如 SSR 拼装模板</p></li><li><p>构建时集成：如 Code Splitting</p></li></ul><p>发布阶段耦合，不推荐使用</p><ul><li>运行时集成：如通过 iframe、JS、Web Components 等方式</li></ul><ol><li>iframe</li><li>Web Components</li><li>JS：比如前端路由</li></ol><h3 id="4-1-目前我们项目痛点"><a href="#4-1-目前我们项目痛点" class="headerlink" title="4.1 目前我们项目痛点"></a>4.1 目前我们项目痛点</h3><p>现状：MPA（多页面应用） + SPA（单页面应用）</p><p>痛点在于：</p><ul><li>历史包袱重，人员更替频繁</li><li>项目多，技术栈杂、老旧</li><li>还存在大量 php 页面，未实现前后端分离</li></ul><h3 id="4-2-对我们公司的价值"><a href="#4-2-对我们公司的价值" class="headerlink" title="4.2 对我们公司的价值"></a>4.2 对我们公司的价值</h3><h4 id="4-2-1-优点"><a href="#4-2-1-优点" class="headerlink" title="4.2.1 优点"></a>4.2.1 优点</h4><ol><li>技术价值</li></ol><ul><li>使公司技术基础设施更开放，更容易引入优秀开源技术</li><li>提高团队技术水平</li><li>减少跨项目代码冲突问题</li></ul><ol><li>产品价值</li></ol><ul><li>跨产品共享模块</li><li><p>进一步优化产品交互体验</p><p>增加基座层，优化体验</p><p>全局loading</p><p>提取菜单，顶部，底部</p><p>提取公共库</p></li><li><p>预加载所有子项目文件</p></li></ul><h4 id="4-2-2-缺点"><a href="#4-2-2-缺点" class="headerlink" title="4.2.2 缺点"></a>4.2.2 缺点</h4><ul><li>增加复杂度</li><li>增加流量成本</li><li>代码库数量增多，管理成本增加</li><li>开发环境复杂</li></ul><h2 id="5-微前端的实践总结"><a href="#5-微前端的实践总结" class="headerlink" title="5. 微前端的实践总结"></a>5. 微前端的实践总结</h2><h3 id="5-1-qiankun"><a href="#5-1-qiankun" class="headerlink" title="5.1 qiankun"></a>5.1 qiankun</h3><p><img src="/images/qiankun.png" alt="img"></p><h3 id="5-2-怎么解决微前端的问题"><a href="#5-2-怎么解决微前端的问题" class="headerlink" title="5.2 怎么解决微前端的问题"></a>5.2 怎么解决微前端的问题</h3><ul><li>基座模式（主从应用）：就是在子应用之前加一层（基座层）<br>注册子应用，添加子应用生命周期（运行时集成）</li><li>路由控制</li></ul><p>通过唯一的子应用入口地址，获取要加载的资源（HTML Entry 方案）</p><ul><li>样式隔离：切入插入样式，切出/卸载删除样式表，浏览器会自动刷新cssom</li><li><p>js 隔离：proxy/快照</p><p>预加载/按需加载</p><p>父子应用通信</p></li></ul><h3 id="5-3-实践中遇到的问题"><a href="#5-3-实践中遇到的问题" class="headerlink" title="5.3 实践中遇到的问题"></a>5.3 实践中遇到的问题</h3><ul><li>Entry 唯一：域名或端口不相同</li><li>开发环境允许跨域：disableHostCheck，headers</li><li>package.json 中的 name 要唯一</li><li>静态资源应该是完整的资源地址</li></ul><h2 id="6-微前端存在的问题"><a href="#6-微前端存在的问题" class="headerlink" title="6. 微前端存在的问题"></a>6. 微前端存在的问题</h2><ul><li>微前端拆分的粒度</li><li>微前端的源码怎么管理</li><li>微前端可以嵌套，要怎么拆分</li><li>提取菜单、顶部，子应用不独立了，怎么办</li></ul><p>借用同事的一句话总结下：</p><p><strong>没有银弹，只是多了一个权衡的维度</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考量到目前公司项目多，技术栈杂，体验不太友好，所以花了点时间大概研究了下微前端&lt;/p&gt;
&lt;p&gt;大概分下面几个部分简单阐述下我的理解，算是自我小结吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微前端的简介&lt;/li&gt;
&lt;li&gt;微前端的价值&lt;/li&gt;
&lt;li&gt;微前端需要解决的问题&lt;/li&gt;
&lt;li&gt;微前端的技术选型&lt;/li&gt;
&lt;li&gt;微前端的实践总结&lt;/li&gt;
&lt;li&gt;微前端存在的问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="微前端" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
      <category term="qiankun" scheme="http://yoursite.com/tags/qiankun/"/>
    
  </entry>
  
  <entry>
    <title>深入理解前端模块加载机制，手写 node.js 的 require 函数</title>
    <link href="http://yoursite.com/2020/08/11/node-require/"/>
    <id>http://yoursite.com/2020/08/11/node-require/</id>
    <published>2020-08-11T12:01:10.000Z</published>
    <updated>2020-10-19T07:33:33.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-模块化的演进"><a href="#1-模块化的演进" class="headerlink" title="1. 模块化的演进"></a>1. 模块化的演进</h2><p>模块化特点的特点是什么？ <strong>防止变量污染</strong></p><p>在以前的开发中，如果不用模块化，我们无法处理依赖关系，所以代码很难维护</p><p>那最早的时候我们是使用 <strong>单例</strong> 的方式解决，但是有个缺点，我们不能保证变量的唯一性，而且单例可能导致调用时浮躁，命名过长等问题, 如下方代码所示：<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  m: <span class="string">'test'</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a1234455 = &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们还有用到了 IFFE（立即执行函数）来处理这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>, a);</span><br><span class="line">  .....</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>再近点，就出现了一些解决模块化的第三方库，下面两种，在现在未前后端分离的项目（也就是 mvc 模式下 jquery 项目）还是会见到的。</p><ul><li>seajs库 cmd(就近依赖，只有在用到某个模块的时候再去require)</li><li>requirejs库 amd(依赖前置， 在定义模块的时候就要声明其依赖的模块)</li></ul><p>这里不多说了，感兴趣的可以百度了解下这两个库。</p><p>那当下 vue, react 框架流行下，我们是如何来处理模块化的呢？</p><p>结论是： umd（统一模块化），常见的是 es6 module（node 中无法使用） 和 commonjs 规范</p><blockquote><p>如果想要在 node 中使用 es module，也就是 import 和 export，怎么办呢？</p><p>node 官网提供了一个 <a href="http://nodejs.cn/api/esm.html#esm_introduction" target="_blank" rel="noopener">ECMAScript模块</a>，它需要将文件后缀改成 .mjs，来支持 import 导入的方式，但是目前还是实验版。</p><p>还有一种方式，就是使用 babel-node 来转化 es6 模块。</p></blockquote><h3 id="1-1-commonjs-规范"><a href="#1-1-commonjs-规范" class="headerlink" title="1.1 commonjs 规范"></a>1.1 commonjs 规范</h3><p>特点是啥，往下看？</p><ul><li>每个 js 文件都是一个模块</li><li>每个文件如果需要用到别的模块 require()</li><li>想把代码给别人使用 需要导出模块 module.exports</li></ul><p>那文件之间是怎么隔离的？</p><p>其实很简单，就是给当前文件代码加了个闭包来隔离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="string">'hello'</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span>  file = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大概效果如下</span></span><br><span class="line"><span class="keyword">let</span>  file = <span class="built_in">require</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="string">'hello'</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;)())</span><br></pre></td></tr></table></figure><h2 id="2-fs-path-vm-等-node-模块"><a href="#2-fs-path-vm-等-node-模块" class="headerlink" title="2. fs path vm 等 node 模块"></a>2. fs path vm 等 node 模块</h2><p>这里为什么单独介绍下这几个模块，因为这几个是核心模块，看过源码，你就知道， require 的实现就需要用到这几个模块。</p><ul><li>path</li></ul><p>path 模块提供了一些实用工具，用于处理文件和目录的路径</p><p>具体可看：<a href="http://nodejs.cn/api/path.html" target="_blank" rel="noopener">path 文档</a></p><ul><li>fs</li></ul><p>fs 模块可用于与文件系统进行交互（以类似于标准 POSIX 函数的方式）。</p><p>具体可看：<a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener">fs 文档</a></p><ul><li>vm</li></ul><p>vm 模块可在 V8 虚拟机上下文中编译和运行代码。 vm 模块不是安全的机制。 不要使用它来运行不受信任的代码。</p><p>具体可看：<a href="http://nodejs.cn/api/vm.html" target="_blank" rel="noopener">vm 文档</a></p><p>vm 模块这里单独提下，</p><p>我们回忆下让字符串执行的方法有哪些?</p><ol><li>eval</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'console.log(a)'</span>)</span><br></pre></td></tr></table></figure><ol><li>new Function</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strFn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'console.log(a)'</span>)</span><br><span class="line">strFn();</span><br></pre></td></tr></table></figure><blockquote><p>vue 模板引擎的实现原理就是 new Function + with</p></blockquote><ol><li>vm</li></ol><p>vm 沙箱，创造一个干净的执行上下文环境，不会向上查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.runInThisContext(str)</span><br></pre></td></tr></table></figure><h2 id="3-require-实现过程"><a href="#3-require-实现过程" class="headerlink" title="3. require 实现过程"></a>3. require 实现过程</h2><h3 id="3-1-断点调试"><a href="#3-1-断点调试" class="headerlink" title="3.1 断点调试"></a>3.1 断点调试</h3><p>这里简单提下如何断点调试，不方便展示，大家可以网上翻阅下文档</p><p>我用的 vscode, 需要配置下 launch.json 文件，下面是我的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 使用 IntelliSense 了解相关属性。</span><br><span class="line">  // 悬停以查看现有属性的描述。</span><br><span class="line">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">  "version": "0.2.0",</span><br><span class="line">  "configurations": [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">          <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Client"</span>,</span><br><span class="line">          <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/app.js"</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行 debug 模式，就可以查看源码，面板如下所示</p><p><img src="/images/node-require-1.png" alt="require"></p><h3 id="3-2-require-执行过程"><a href="#3-2-require-执行过程" class="headerlink" title="3.2 require 执行过程"></a>3.2 require 执行过程</h3><ol><li>加载时  先看一下模块是否被缓存过 第一次没有缓存过</li><li>Module._resolveFilename 解析出当前引用文件的绝对路径</li><li>是否是内置模块，不是就创建一个模块 模块有两个属性 一个叫 id = 文件名， exports = {}</li><li>将模块放到缓存中</li><li>加载这个文件 Module.load</li><li>拿到文件的扩展名 findLongestRegisteredExtension() 根据扩展名来调用对应的方法</li><li>会读取文件  差一个加一个自执行函数，将代码放入</li></ol><h3 id="3-3-手写-require-源码"><a href="#3-3-手写-require-源码" class="headerlink" title="3.3 手写 require 源码"></a>3.3 手写 require 源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js 文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'加载了一次'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// require.js 文件</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> vm = <span class="built_in">require</span>(<span class="string">'vm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Module</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.id = id; <span class="comment">// 文件名</span></span><br><span class="line">  <span class="keyword">this</span>.exports = &#123;&#125;; <span class="comment">// exports 导出对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module._resolveFilename = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 应该去依次查找 Object.keys(Module._extensions)</span></span><br><span class="line">  <span class="comment">// 默认先获取文件的名字</span></span><br><span class="line">  filename = path.resolve(filename);</span><br><span class="line">  <span class="comment">// 获取文件的扩展名 并判断是否有，若没有就是.js,若有，就采用原来的名字</span></span><br><span class="line">  <span class="keyword">let</span> flag = path.extname(filename);</span><br><span class="line">  <span class="keyword">let</span> extname = flag ? flag : <span class="string">'.js'</span>;</span><br><span class="line">  <span class="keyword">return</span> flag ? filename : (filename + extname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module._extensions = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">Module.wrapper = [</span><br><span class="line">  <span class="string">'(function(module,exports,require,__dirname,__filename)&#123;'</span>,</span><br><span class="line">  <span class="string">'&#125;)'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Module._extensions[<span class="string">'.js'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123; <span class="comment">// id exports</span></span><br><span class="line">  <span class="comment">// module.exports = 'hello'</span></span><br><span class="line">  <span class="keyword">let</span> content = fs.readFileSync(<span class="built_in">module</span>.id, <span class="string">'utf8'</span>)</span><br><span class="line">  <span class="keyword">let</span> strTemplate = Module.wrapper[<span class="number">0</span>] + content + Module.wrapper[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// console.log('111', strTemplate);</span></span><br><span class="line">  <span class="comment">// 希望让这个函数执行，并且，我希望吧exports 传入进去</span></span><br><span class="line">  <span class="keyword">let</span> fn = vm.runInThisContext(strTemplate);</span><br><span class="line">  <span class="comment">// 模块中的 this 就是 module.exports的对象</span></span><br><span class="line">  fn.call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, requireMe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json 就是直接将结果放到 module.exports 上</span></span><br><span class="line">Module._extensions[<span class="string">'.json'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> content = fs.readFileSync(<span class="built_in">module</span>.id, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">JSON</span>.parse(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module.prototype.load = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取文件的扩展名</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.extname(<span class="keyword">this</span>.id);</span><br><span class="line">  Module._extensions[extname](<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module._cache = &#123;&#125;; <span class="comment">// 缓存对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requireMe</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> absPath = Module._resolveFilename(filename);</span><br><span class="line">  <span class="comment">// console.log(absPath);</span></span><br><span class="line">  <span class="keyword">if</span> (Module._cache[absPath]) &#123; <span class="comment">// 如果缓存过了，直接将exports 对象返回</span></span><br><span class="line">    <span class="keyword">return</span> Module._cache[absPath].exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">module</span> = <span class="keyword">new</span> Module(absPath);</span><br><span class="line">  <span class="comment">// 增加缓存模块</span></span><br><span class="line">  Module._cache[absPath] = <span class="built_in">module</span>;</span><br><span class="line">  <span class="comment">// 加载</span></span><br><span class="line">  <span class="built_in">module</span>.load();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports; <span class="comment">// 用户将结果赋予给 exports 对象上 默认 require 方法会返回 module.exports 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = requireMe(<span class="string">'./a'</span>);</span><br><span class="line">str = requireMe(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'==='</span>, str);</span><br></pre></td></tr></table></figure><h2 id="4-module-exports-与-exports-关系"><a href="#4-module-exports-与-exports-关系" class="headerlink" title="4. module.exports 与 exports 关系"></a>4. module.exports 与 exports 关系</h2><p>exports 是 module.exports 一个简写</p><ul><li>常用的导出方式</li></ul><p>exports.xxx = xxx<br>module.exports<br>module.exports.a = xxx<br>global.a = xxx（可以，但不会用，全局污染）<br>exports = xxx(错误)</p><h2 id="5-模块查找方式"><a href="#5-模块查找方式" class="headerlink" title="5. 模块查找方式"></a>5. 模块查找方式</h2><p>有几种模块：</p><ol><li>内置模块  fs path vm</li><li>文件模块 自定义模块 ‘./‘</li><li>第三方模块 （bluebird….）必须安装才能使用， 用法和内置模块是一样的</li></ol><p>方式：</p><ul><li>先查找当前文件下的文件存不存在，不存在 添加 .js .json 后缀 找到后就结束</li><li>找不到后会找对应的文件夹，默认找索引文件，如果有package.json ，有这个文件，会查找 main对应的入口文件，去进行加载</li><li>按照包的方法查找 多个文件组成一个包 npm init -y</li><li>除了文件的查找方式  第三方模块的查找方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="built_in">require</span>(<span class="string">'xxx'</span>) <span class="comment">// xxx表示的是第三方文件夹的名字，找到名字后会找package.json ,如果找不到向上找，找不到就报错。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.paths); <span class="comment">// 查看效果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-模块化的演进&quot;&gt;&lt;a href=&quot;#1-模块化的演进&quot; class=&quot;headerlink&quot; title=&quot;1. 模块化的演进&quot;&gt;&lt;/a&gt;1. 模块化的演进&lt;/h2&gt;&lt;p&gt;模块化特点的特点是什么？ &lt;strong&gt;防止变量污染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在以前的开发中，如果不用模块化，我们无法处理依赖关系，所以代码很难维护&lt;/p&gt;
&lt;p&gt;那最早的时候我们是使用 &lt;strong&gt;单例&lt;/strong&gt; 的方式解决，但是有个缺点，我们不能保证变量的唯一性，而且单例可能导致调用时浮躁，命名过长等问题, 如下方代码所示：&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>whistle 抓包实践</title>
    <link href="http://yoursite.com/2020/06/10/whistle%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2020/06/10/whistle抓包/</id>
    <published>2020-06-10T12:09:02.000Z</published>
    <updated>2020-12-05T07:46:41.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>whistle 是一款用 Node 实现的跨平台的 Web 调试代理工具。简而言之就是 Node 版的 Fiddler、Charles，不过这个工具我觉得使用更简单、功能也更加实用，而且我觉得比 Fiddler、Charles 更加好用。</p><p><a href="https://wproxy.org/whistle/" target="_blank" rel="noopener">whistle 文档</a></p><a id="more"></a><h2 id="2-安装-amp-运行"><a href="#2-安装-amp-运行" class="headerlink" title="2. 安装&amp;运行"></a>2. 安装&amp;运行</h2><h3 id="2-1-安装-node"><a href="#2-1-安装-node" class="headerlink" title="2.1 安装 node"></a>2.1 安装 node</h3><h3 id="2-2-安装-whistle"><a href="#2-2-安装-whistle" class="headerlink" title="2.2 安装 whistle"></a>2.2 安装 whistle</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g whistle</span><br></pre></td></tr></table></figure><h3 id="2-3-启动-whistle"><a href="#2-3-启动-whistle" class="headerlink" title="2.3 启动 whistle"></a>2.3 启动 whistle</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w2 <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="/images/whistle/whistle-1.png" alt="img1"></p><h3 id="2-4-安装证书"><a href="#2-4-安装证书" class="headerlink" title="2.4 安装证书"></a>2.4 安装证书</h3><p>电脑打开浏览器，输入网址：<a href="http://127.0.0.1:8899/，点击HTTPS，安卓手机可以直接通过手机浏览器扫描二维码下载安装证书或者在浏览器网址中输入" target="_blank" rel="noopener">http://127.0.0.1:8899/，点击HTTPS，安卓手机可以直接通过手机浏览器扫描二维码下载安装证书或者在浏览器网址中输入</a> rootca.pro，下载证书。</p><p><img src="/images/whistle/whistle-2.png" alt="img2"></p><blockquote><p>要是实在下载不下来，就通过电脑浏览器下载证书，将证书复制黏贴到手机，点击证书安装。</p></blockquote><h3 id="2-5-手机配置-wifi-代理"><a href="#2-5-手机配置-wifi-代理" class="headerlink" title="2.5 手机配置 wifi 代理"></a>2.5 手机配置 wifi 代理</h3><p><img src="/images/whistle/whistle-3.png" alt="img3"></p><h3 id="2-6-效果展示"><a href="#2-6-效果展示" class="headerlink" title="2.6 效果展示"></a>2.6 效果展示</h3><p><img src="/images/whistle/whistle-4.png" alt="img4"></p><p>这样基本的抓包功能就 ok 了。</p><h2 id="3-代理"><a href="#3-代理" class="headerlink" title="3. 代理"></a>3. 代理</h2><p><img src="/images/whistle/whistle-5.png" alt="img5"></p><p>代理请求支持域名 ip 以及本地文件，在日常调试中极为方便：</p><ul><li>比如代理线上某个 js css html 文件在本地修改，可做到实时调试</li><li>比如将生产接口返回的 json 保存在本地，然后在测试环境进行调试</li><li>…</li></ul><h2 id="4-注入代码"><a href="#4-注入代码" class="headerlink" title="4. 注入代码"></a>4. 注入代码</h2><p>先准备需要注入的代码片段，之后配置规则</p><p><img src="/images/whistle/whistle-6.png" alt="img6"></p><p><img src="/images/whistle/whistle-7.png" alt="img7"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;p&gt;whistle 是一款用 Node 实现的跨平台的 Web 调试代理工具。简而言之就是 Node 版的 Fiddler、Charles，不过这个工具我觉得使用更简单、功能也更加实用，而且我觉得比 Fiddler、Charles 更加好用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wproxy.org/whistle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;whistle 文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="whistle" scheme="http://yoursite.com/tags/whistle/"/>
    
  </entry>
  
  <entry>
    <title>webpack-生产环境构建优化</title>
    <link href="http://yoursite.com/2020/05/18/webpack-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/05/18/webpack-生产环境构建优化/</id>
    <published>2020-05-18T13:05:20.000Z</published>
    <updated>2020-09-29T07:21:40.054Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/152242638" target="_blank" rel="noopener">构建分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/158766563" target="_blank" rel="noopener">开发环境构建优化</a></li><li>生产环境构建优化</li><li>webpack 原理浅析</li><li>如何实现一个简易版 webpack</li><li>如何手写一个 loader 和 plugin<a id="more"></a></li></ul><p>好了，进入主题，本篇主要是介绍生产环境构建优化（包含速度、体积）。</p><h2 id="1-版本升级"><a href="#1-版本升级" class="headerlink" title="1. 版本升级"></a>1. 版本升级</h2><p>建议更新到最新稳定版本，为什么呢？可以看我上一篇<a href="https://zhuanlan.zhihu.com/p/158766563" target="_blank" rel="noopener">开发环境构建优化</a>。</p><h2 id="2-devtool"><a href="#2-devtool" class="headerlink" title="2. devtool"></a>2. devtool</h2><p>不设置 devtool 或者设置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么呢？可以看我上一篇<a href="https://zhuanlan.zhihu.com/p/158766563" target="_blank" rel="noopener">开发环境构建优化</a>。</p><h2 id="3-optimization-优化"><a href="#3-optimization-优化" class="headerlink" title="3. optimization 优化"></a>3. optimization 优化</h2><p><a href="https://webpack.docschina.org/configuration/optimization/" target="_blank" rel="noopener">optimization 介绍</a></p><p>一些 plugin 比如压缩混淆在开发环境是没有意义的，所以需要写两份不同的配置文件，防止这些插件作用在开发环境。</p><p>以下配置用于生产环境，可以优化生产环境构建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">        minSize: <span class="number">30000</span>,</span><br><span class="line">        automaticNameDelimiter: <span class="string">'-'</span>,</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            vendors: &#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                priority: <span class="number">10</span>,</span><br><span class="line">                name: <span class="string">'vendors'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="string">"manifest"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-clean-webpack-plugin"><a href="#4-clean-webpack-plugin" class="headerlink" title="4. clean-webpack-plugin"></a>4. clean-webpack-plugin</h2><p>用于清除之前构建生成的 dist 目录的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/pc/*.*'</span>], &#123;</span><br><span class="line">          root: path.resolve(__dirname, <span class="string">'../'</span>)</span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-HashedModuleIdsPlugin"><a href="#5-HashedModuleIdsPlugin" class="headerlink" title="5. HashedModuleIdsPlugin"></a>5. HashedModuleIdsPlugin</h2><p>该插件会根据模块的相对路径生成一个四位数的 hash 作为模块 id, 建议用于生产环境。具体可以看<a href="https://www.webpackjs.com/plugins/hashed-module-ids-plugin/" target="_blank" rel="noopener">官网</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-DllPlugin"><a href="#6-DllPlugin" class="headerlink" title="6. DllPlugin"></a>6. DllPlugin</h2><p><strong>注意：重要优化手段</strong>, 是什么，这里不做介绍了，可以查看<a href="https://webpack.docschina.org/plugins/dll-plugin/" target="_blank" rel="noopener">官网介绍</a></p><p>下面是我的一些配置，可以参考下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">        context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">        name: <span class="string">'__dll__[name]'</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">'../dist/dlls/'</span>, <span class="string">'[name].manifest.json'</span>)</span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">        name: <span class="string">'__dll__vendors'</span>,</span><br><span class="line">        manifest: path.join(__dirname, <span class="string">'../dist/dlls/'</span>, <span class="string">'vendors.manifest.json'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">        name: <span class="string">'__dll__baiduMap'</span>,</span><br><span class="line">        manifest: path.join(__dirname, <span class="string">'../dist/dlls/'</span>, <span class="string">'baiduMap.manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-assets-webpack-plugin"><a href="#7-assets-webpack-plugin" class="headerlink" title="7. assets-webpack-plugin"></a>7. assets-webpack-plugin</h2><p>使用 DLL &amp; DllReference 后，第三方库的确前置构建了，但是如何让打包出来的 bundle 文件在 index.html 中引用呢？如果 output.fileName 写死名字，在 index.html 中也写死，就没有了强缓存，如果 ouput.fileName=[name].[hash].js，就得找到一个往 html 里添加 js 的办法</p><p>有了这个插件，看起来就行得通了，在打包第三库时使用 assets-webpack-plugin 将 bundle 的文件名输出，保存成 json，在打包业务代码时配合 html-webpack-plugin 插件，将 bundle 添加到 index.html 中</p><p>该插件生成一个记录了版本号的文件；详细的可以看<a href="https://www.npmjs.com/package/assets-webpack-plugin" target="_blank" rel="noopener">官网地址</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AssetsPlugin = <span class="built_in">require</span>(<span class="string">'assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> AssetsPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'dll-bundle.json'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的 dll-bundle.json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"baiduMap"</span>:&#123;<span class="attr">"js"</span>:<span class="string">"/dist/dlls/baiduMap.dll.6c409412.js"</span>&#125;,<span class="attr">"vendors"</span>:&#123;<span class="attr">"js"</span>:<span class="string">"/dist/dlls/vendors.dll.6c409412.js"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><p>我上一篇开发环境用到的文件压缩和 CDN …，这些在生产环境也可以用，看你的需求了。</p><p>大家还有没有其他的优化黑魔法，欢迎大家留言交流，共同学习成长。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/152242638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;构建分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/158766563&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发环境构建优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;生产环境构建优化&lt;/li&gt;
&lt;li&gt;webpack 原理浅析&lt;/li&gt;
&lt;li&gt;如何实现一个简易版 webpack&lt;/li&gt;
&lt;li&gt;如何手写一个 loader 和 plugin
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-开发环境构建优化</title>
    <link href="http://yoursite.com/2020/05/06/webpack-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/05/06/webpack-开发环境构建优化/</id>
    <published>2020-05-06T12:04:20.000Z</published>
    <updated>2020-07-11T10:14:52.697Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/152242638" target="_blank" rel="noopener">构建分析</a></li><li>开发环境构建优化</li><li>生产环境构建优化</li><li>webpack 原理浅析</li><li>如何实现一个简易版 webpack</li><li>如何手写一个 loader 和 plugin<a id="more"></a></li></ul><p>好了，进入主题，本篇主要是介绍开发环境构建优化（包含速度、体积），如何分析可以看我上一篇。</p><h2 id="1-版本升级"><a href="#1-版本升级" class="headerlink" title="1. 版本升级"></a>1. 版本升级</h2><p>现在，我们已经可以安装最新的 webpack 5 了，不过 v5 还不是正式版本。目前 npm 官网上的最新版本仍然是 v4。由于不是本章重点，后面有机会会详细阐述，感兴趣的可以看下<a href="https://cloud.tencent.com/developer/article/1477458" target="_blank" rel="noopener">这篇文章</a>了解下，最好能动手玩一玩。</p><p>建议更新到最新稳定版本，为什么呢？可以看下<a href="https://webpack.docschina.org/guides/build-performance/" target="_blank" rel="noopener">官网-构建性能</a></p><p><img src="/images/webpack/webpack-5.png" alt="webapck-5.png"></p><p>所以别说 v3 了, webpack4.x 的速度要远大于 3.x, v4 的小版本也建议更新到最新稳定版。</p><p>另外 webpack 版本也会存在导致本地使用 node 高版本跑项目时，报出一些奇奇怪怪的错误。像我遇到过一次 webpack v4.6、node v12.16.0 就报错了。</p><p><img src="/images/webpack/webpack-6.png" alt="webapck-6.png"><br><img src="/images/webpack/webpack-7.png" alt="webapck-7.png"></p><h2 id="2-devtool"><a href="#2-devtool" class="headerlink" title="2. devtool"></a>2. devtool</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发环境建议使用 eval-source-map, 这会减少你本地构建的时间。</p><p>为什么呢？可以看下<a href="https://webpack.docschina.org/configuration/devtool/#devtool" target="_blank" rel="noopener">官网介绍-devtool</a>,这部分的中文是我负责翻译的，有觉得不合理的，欢迎留言。</p><p><img src="/images/webpack/webpack-8.png" alt="webapck-8.png"></p><h2 id="3-resolve"><a href="#3-resolve" class="headerlink" title="3. resolve"></a>3. resolve</h2><p>建议配置 alias 和 extensions，同时项目中要使用到 alias，否则配置就毫无意义了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        src: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">        page: path.resolve(__dirname, <span class="string">'../src/page'</span>),</span><br><span class="line">        mobilepage: path.resolve(__dirname, <span class="string">'../src/mobilepage'</span>),</span><br><span class="line">        components: path.resolve(__dirname, <span class="string">'../src/components'</span>),</span><br><span class="line">        containerComponents: path.resolve(__dirname, <span class="string">'../src/containerComponents'</span>),</span><br><span class="line">        store: path.resolve(__dirname, <span class="string">'../src/store'</span>),</span><br><span class="line">        <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'../src/static'</span>),</span><br><span class="line">        vue: <span class="string">'vue/dist/vue.js'</span>,</span><br><span class="line">        utils: path.resolve(__dirname, <span class="string">'../src/utils'</span>)</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".vue"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看下</p><ul><li><a href="https://imweb.io/topic/5a40551ea192c3b460fce335" target="_blank" rel="noopener">webpack-缩小范围</a></li><li><a href="https://webpack.docschina.org/configuration/resolve/" target="_blank" rel="noopener">官网-resolve</a></li></ul><h2 id="4-避免不必要的-plugin-和优化任务"><a href="#4-避免不必要的-plugin-和优化任务" class="headerlink" title="4. 避免不必要的 plugin 和优化任务"></a>4. 避免不必要的 plugin 和优化任务</h2><p>一些plugin比如压缩混淆在开发环境是没有意义的，所以需要写两份不同的配置文件，防止这些插件作用在开发环境。</p><p>另外需要防止不必要的优化，可以在开发环境把这些都关掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    removeAvailableModules: <span class="literal">false</span>,</span><br><span class="line">    removeEmptyChunks: <span class="literal">false</span>,</span><br><span class="line">    splitChunks: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-happypack"><a href="#5-happypack" class="headerlink" title="5. happypack"></a>5. happypack</h2><p><a href="https://github.com/amireh/happypack" target="_blank" rel="noopener">happypack</a></p><p>在使用 Webpack 对项目进行构建时，会对大量文件进行解析和处理。当文件数量变多之后，Webpack 构件速度就会变慢。由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的任务要一个一个进行操作。</p><p>而 Happypack 的作用就是将文件解析任务分解成多个子进程并发执行。子进程处理完任务后再将结果发送给主进程。所以可以大大提升 Webpack 的项目构件速度。</p><p>这里顺带提一下，在 loader 中最好加上 exclude 和 include 配置，会减少构建时间的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">'happypack/loader'</span>,</span><br><span class="line">                include: [</span><br><span class="line">                    path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                ],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            loaders: [<span class="string">'babel-loader'</span>],</span><br><span class="line">            threads: <span class="number">4</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-使用-noParse"><a href="#6-使用-noParse" class="headerlink" title="6. 使用 noParse"></a>6. 使用 noParse</h2><p>webpack 打包的时候，有时不需要解析某些模块的加载(这些模块并没有依赖，或者根本没有模块化)，我们可以直接加上这个参数，直接跳过这种解析，像 jquery、lodash…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  noParse: <span class="regexp">/node_modules\/(jquery.js)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-hard-source-webpack-plugin"><a href="#7-hard-source-webpack-plugin" class="headerlink" title="7. hard-source-webpack-plugin"></a>7. hard-source-webpack-plugin</h2><p><a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="noopener">hard-source-webpack-plugin</a></p><p>这是用于加载缓存，效果很强。</p><ul><li>第一次构建将花费正常的时间</li><li>第二次构建将显着加快（大概提升90%的构建速度）。</li></ul><p>webpack v5 实现了此功能，感兴趣的可以下载试试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HardSourceWebpackPlugin = <span class="built_in">require</span>(<span class="string">'hard-source-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HardSourceWebpackPlugin(), <span class="comment">// 缓存，每当程序包依赖性发生变化时，请记住清除缓存</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-压缩-js-html-css-文件"><a href="#8-压缩-js-html-css-文件" class="headerlink" title="8. 压缩 js, html, css 文件"></a>8. 压缩 js, html, css 文件</h2><p>要想优化构建后的体积，不断减少静态资源文件的大小，我们希望 webpack 帮助我们尽可能压缩文件的体积。对于 js 脚本文件而言，webpack4.0 在 mode 为 ‘production’ 时，默认会启动代码的压缩。除此之外，我们需要手动对 html 和 css 进行压缩。</p><p>针对html 的压缩，只需要对 html-webpack-plugin 进行相关配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">          title: <span class="string">'webpack优化'</span>,</span><br><span class="line">          filename: <span class="string">'index.html'</span>,</span><br><span class="line">          template: path.resolve(__dirname, <span class="string">'../index.html'</span>),</span><br><span class="line">          minify: &#123; <span class="comment">// 压缩 HTML 的配置</span></span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            useShortDoctype: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对 css 的压缩， webpack4.0 使用 optimize-css-assets-webpack-plugin 来压缩单独的 css 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSAssetsPlugin()</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-合并压缩图片"><a href="#9-合并压缩图片" class="headerlink" title="9. 合并压缩图片"></a>9. 合并压缩图片</h2><p>提升性能的一个重要的条件是降低 http 请求数，而应用中经常会有大大小小的图片需要处理，对应用中的小图标来说，css sprite 是首选，将各种图标集合成一张大的图片可以很好的减少网络请求数。而对于需要独立开的图片，且大小在合理范围内时，我们可以将图片转换成 base64 位编码，内嵌到css 中，同样可以减少请求。</p><p>处理图片资源时，webpack 提供了 file-loader 和url-loader 两个loaders供选择，file-loader 和url-loader 的作用，可以用来解析项目中图片文件的url引入问题。两者的区别在于，url-loader 可以将小于指定字节的文件转为 DataURL, 大于指定字节 的依旧会使用 file-loader 进行解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpe?g|gif|svg|ttf|woff2|woff)(\?.*)?$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">              loader: <span class="string">'url-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                limit: <span class="number">8192</span>,</span><br><span class="line">                outputPath: <span class="string">'assets/fonts/'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理完雪碧图和小图片的 base64 转换后，对于大图片来说，webpack还可以做到对图片进行压缩，推荐使用 <a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>,插件提供了多种形式的压缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                optipng: &#123; <span class="comment">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span></span><br><span class="line">                  enabled: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                pngquant: &#123; <span class="comment">// 使用 imagemin-pngquant 压缩 png</span></span><br><span class="line">                  quality: <span class="string">'65-90'</span>,</span><br><span class="line">                  speed: <span class="number">4</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-使用-CDN"><a href="#10-使用-CDN" class="headerlink" title="10. 使用 CDN"></a>10. 使用 CDN</h2><p>在项目的 index.html 中，常规方式引入 CDN 链接，此处以 jquery 为例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CDN方式引入jquery --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://.../jquery@2.13.2/lib/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <a href="https://webpack.docschina.org/configuration/externals/" target="_blank" rel="noopener">externals</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    jquery: <span class="string">'jQuery'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.my-element'</span>).animate(<span class="comment">/* ... */</span>);</span><br></pre></td></tr></table></figure><h2 id="11-progress-bar-webpack-plugin"><a href="#11-progress-bar-webpack-plugin" class="headerlink" title="11. progress-bar-webpack-plugin"></a>11. progress-bar-webpack-plugin</h2><p><a href="https://www.npmjs.com/package/progress-bar-webpack-plugin" target="_blank" rel="noopener">progress-bar-webpack-plugin</a></p><p>最后推荐个构建体验插件-构建进度条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ProgressBarPlugin(),</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/webpack-9.png" alt="webapck-9"></p><p>最后，目前说了大概 10 种开发环境构建速度和体积的优化。关于体积部分，生产环境也会用到。</p><p>大家还有没有其他的优化黑魔法，欢迎大家留言交流，共同学习成长。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/152242638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;构建分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发环境构建优化&lt;/li&gt;
&lt;li&gt;生产环境构建优化&lt;/li&gt;
&lt;li&gt;webpack 原理浅析&lt;/li&gt;
&lt;li&gt;如何实现一个简易版 webpack&lt;/li&gt;
&lt;li&gt;如何手写一个 loader 和 plugin
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-构建分析</title>
    <link href="http://yoursite.com/2020/04/26/webpack-%E6%9E%84%E5%BB%BA%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/04/26/webpack-构建分析/</id>
    <published>2020-04-26T14:04:20.000Z</published>
    <updated>2020-06-30T15:08:20.829Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：</p><ul><li>构建分析</li><li>开发环境构建优化</li><li>生产环境构建优化</li><li>webpack 原理浅析</li><li>如何实现一个简易版 webpack</li><li>如何手写一个 loader 和 plugin<a id="more"></a></li></ul><p>好了，进入主题，本篇主要是介绍如何做构建分析。</p><h2 id="1-webpack-官网提供的分析工具"><a href="#1-webpack-官网提供的分析工具" class="headerlink" title="1. webpack 官网提供的分析工具"></a>1. webpack 官网提供的分析工具</h2><p>webpack 官网提供了 stats.json 文件帮助分析打包结果， 使用下面的命令生成 stats.json 文件。</p><p>该命令首先使用 webpack 对文件进行打包，然后将打包后的文件模块进分析，并将分析后的结果以 json 的形式输出到 stats.json 文件。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --profile --json &gt; compilation-stats.json</span><br></pre></td></tr></table></figure><p>具体如何分析可参考 <a href="https://webpack.docschina.org/api/stats/" target="_blank" rel="noopener">webpack - stat 说明</a>, 同时官方还提供了 <a href="http://webpack.github.io/analyse/" target="_blank" rel="noopener">分析工具</a>，通过上传生成的 stats.json 文件，可以更直观的分析打包模块。如下图所示。</p><p><img src="/images/webpack/webpack-1.png" alt="webpack-1"><br><img src="/images/webpack/webpack-2.png" alt="webpack-2"></p><p>我是用下面两个第三方 plugin 来做分析的。</p><h2 id="2-webpack-bundle-analyzer"><a href="#2-webpack-bundle-analyzer" class="headerlink" title="2. webpack-bundle-analyzer"></a>2. webpack-bundle-analyzer</h2><p>该 plugin 可以更方便的查看模块打包的情况.</p><h3 id="2-1-如何使用"><a href="#2-1-如何使用" class="headerlink" title="2.1 如何使用"></a>2.1 如何使用</h3><ul><li>安装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><ul><li>分析已经存在的 stats.json 文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-bundle-analyzer stats.json</span><br></pre></td></tr></table></figure><ul><li>打包后进行分析。这种情况需要在 webpack 的配置文件中添加配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;<span class="comment">/** 配置 **/</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-效果展示"><a href="#2-2-效果展示" class="headerlink" title="2.2 效果展示"></a>2.2 效果展示</h3><p><img src="/images/webpack/webpack-3.png" alt="webpack-3"></p><h3 id="2-3-配置信息"><a href="#2-3-配置信息" class="headerlink" title="2.3 配置信息"></a>2.3 配置信息</h3><p>配置信息可参考 <a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">官网介绍</a>，这里就不做过多介绍了。</p><h2 id="3-speed-measure-webpack-plugin"><a href="#3-speed-measure-webpack-plugin" class="headerlink" title="3. speed-measure-webpack-plugin"></a>3. speed-measure-webpack-plugin</h2><p>该 plugin 可以在打包过程中对使用的 loader 和 plugin 进行打包速度分析。</p><h3 id="3-1-如何使用"><a href="#3-1-如何使用" class="headerlink" title="3.1 如何使用"></a>3.1 如何使用</h3><ul><li>安装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install speed-measure-webpack-plugin -D</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">'speed-measure-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> smp =<span class="keyword">new</span> SpeedMeasurePlugin(&#123;<span class="comment">/**配置**/</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2-效果展示"><a href="#3-2-效果展示" class="headerlink" title="3.2 效果展示"></a>3.2 效果展示</h3><p><img src="/images/webpack/webpack-4.png" alt="webpack-4"></p><p>通过上面的分析，发现包平均构建有 12 M左右, 构建时间偶尔会有 1 分 30 多秒的高光表现。下篇会介绍我的优化过程。</p><p>对于 webpack 构建分析还有什么好的方式，欢迎各位大佬留言探讨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚对我们前端项目做了一顿分析优化操作，因为接手时每次构建要花两分钟左右的时间，实在忍受不了，只能动手了。通过这次优化，重新温习了下 webpack 的一些知识。接下来会关于 webpack 展开写几篇心得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建分析&lt;/li&gt;
&lt;li&gt;开发环境构建优化&lt;/li&gt;
&lt;li&gt;生产环境构建优化&lt;/li&gt;
&lt;li&gt;webpack 原理浅析&lt;/li&gt;
&lt;li&gt;如何实现一个简易版 webpack&lt;/li&gt;
&lt;li&gt;如何手写一个 loader 和 plugin
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>记一次公司 node 实现 BFF 的分享</title>
    <link href="http://yoursite.com/2020/04/18/wrk/"/>
    <id>http://yoursite.com/2020/04/18/wrk/</id>
    <published>2020-04-18T12:04:02.000Z</published>
    <updated>2020-06-09T11:44:07.637Z</updated>
    
    <content type="html"><![CDATA[<p>  最近公司有一个团队要搭建 bff 层，顺应了他们的要求，准备了一波分享。<br><a id="more"></a></p><p>  具体从当前业务痛点、BFF 是什么、解决了什么问题、实现一个 BFF 要做哪些事情这几个方面去讲解。</p><p>  <img src="/images/node-bff/node-bff.001.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.002.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.003.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.004.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.005.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.006.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.007.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.008.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.009.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.010.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.011.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.012.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.013.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.014.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.015.jpeg" alt="img"><br>  <img src="/images/node-bff/node-bff.016.jpeg" alt="img"></p><p>  项目演示： <a href="https://github.com/weiyuan0609/egg-server-template" target="_blank" rel="noopener">https://github.com/weiyuan0609/egg-server-template</a></p><h2 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h2><p>ppt 中有提到 wrk 这个工具，这里做个具体的讲解</p><p>我用的是 mac, 所以下面都是基于此系统来讲解的</p><h3 id="1-wrk-介绍"><a href="#1-wrk-介绍" class="headerlink" title="1. wrk 介绍"></a>1. wrk 介绍</h3><p>wrk 是一个用来做 HTTP benchmark 测试的工具。可以产生显著的压力。相比于 Apache ab 功能更为强大，可以使用 lua 脚本来支持更为复杂的测试场景，例如 POST 请求等。在对于 Restful 架构的 API 接口来说，测试起来更加便捷。</p><h3 id="2-下载-wrk"><a href="#2-下载-wrk" class="headerlink" title="2. 下载 wrk"></a>2. 下载 wrk</h3><p>brew install wrk</p><ul><li>如果这里卡住，可以调整</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><ul><li>再执行一次 brew install wrk 即可</li></ul><h3 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3. 使用方式"></a>3. 使用方式</h3><p>可以使用 wrk -help 查看</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用方法: wrk <span class="xml"><span class="tag">&lt;<span class="name">选项</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">被测HTTP服务的URL</span>&gt;</span></span></span><br><span class="line">  Options:</span><br><span class="line"><span class="code">    -c, --connections &lt;N&gt;  跟服务器建立并保持的TCP连接数量</span></span><br><span class="line"><span class="code">    -d, --duration    &lt;T&gt;  压测时间</span></span><br><span class="line"><span class="code">    -t, --threads     &lt;N&gt;  使用多少个线程进行压测</span></span><br><span class="line"></span><br><span class="line"><span class="code">    -s, --script      &lt;S&gt;  指定Lua脚本路径</span></span><br><span class="line"><span class="code">    -H, --header      &lt;H&gt;  为每一个HTTP请求添加HTTP头</span></span><br><span class="line"><span class="code">        --latency          在压测结束后，打印延迟统计信息</span></span><br><span class="line"><span class="code">        --timeout     &lt;T&gt;  超时时间</span></span><br><span class="line"><span class="code">    -v, --version          打印正在使用的wrk的详细版本信息</span></span><br><span class="line"></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">N</span>&gt;</span></span>代表数字参数，支持国际单位 (1k, 1M, 1G)</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span>代表时间参数，支持时间单位 (2s, 2m, 2h)`</span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t8 -c500 -d2s --latency <span class="string">"http://localhost:8080/test"</span></span><br></pre></td></tr></table></figure><ul><li>我这服务跑在本地 <a href="http://localhost://8080" target="_blank" rel="noopener">http://localhost://8080</a></li><li>采用 8 个线程，500个长链接，压测 2 秒</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Running 2s <span class="built_in">test</span> @ http://localhost:8080/<span class="built_in">test</span></span><br><span class="line">  8 threads and 500 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    40.70ms    9.60ms  83.48ms   66.26%</span><br><span class="line">    Req/Sec   640.89    328.89     1.43k    64.29%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   31.15ms</span><br><span class="line">     75%   23.46ms</span><br><span class="line">     90%   62.23ms</span><br><span class="line">     99%   85.23ms</span><br><span class="line">  7920 requests <span class="keyword">in</span> 2.07s, 2.02MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect 253, <span class="built_in">read</span> 201, write 0, timeout 0</span><br><span class="line">Requests/sec:   3322.60</span><br><span class="line">Transfer/sec:      1.60MB</span><br></pre></td></tr></table></figure><ul><li>可以看出 2s 内完成了 7920 个请求，2.02mb 的数据读取</li><li>当然你也可以用 lua 脚本个性化测试,这里不做过度的讲解，有兴趣可以去学习下</li><li>wrk 使用方便，结果清晰。并且因为非阻塞 IO 的使用，可以在普通的测试机上创建出大量的连接，从而达到较好的压测效果。</li><li>同时又做过极限压测，出现了 OOM 的情况，记得 Node.js 版本还是 12.x 版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近公司有一个团队要搭建 bff 层，顺应了他们的要求，准备了一波分享。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="wrk" scheme="http://yoursite.com/tags/wrk/"/>
    
  </entry>
  
  <entry>
    <title>promise 的那些事</title>
    <link href="http://yoursite.com/2020/03/25/promise/"/>
    <id>http://yoursite.com/2020/03/25/promise/</id>
    <published>2020-03-25T03:10:19.000Z</published>
    <updated>2020-03-25T04:36:20.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-promise-的由来"><a href="#1-promise-的由来" class="headerlink" title="1. promise 的由来"></a>1. promise 的由来</h2><h3 id="1-1-异步"><a href="#1-1-异步" class="headerlink" title="1.1 异步"></a>1.1 异步</h3><p>我们都知道 js 是单线程的，也就是说一次只能完成一件任务。如果有多个任务，就必须排队，等待前面一个任务完成，再执行后面一个任务。</p><p>这种方式虽然实现起来比较简单，执行环境相对单纯，但是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段 js 代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p><p>为了解决这个问题，js 语言将任务的执行模式分成两种：同步和异步（异步任务不具有”堵塞“效应）。</p><a id="more"></a><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是 Ajax 操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有 http 请求，服务器性能会急剧下降，很快就会失去响应。</p><h3 id="1-2-处理异步的几种方式"><a href="#1-2-处理异步的几种方式" class="headerlink" title="1.2 处理异步的几种方式"></a>1.2 处理异步的几种方式</h3><ul><li>使用回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(url, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    ajax(url1, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        ajax(url2, () =&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是几年前的方法，我们可以看出这样写简单、好实现，但是很容易写出回调地狱，如果嵌套很深，维护人员会很痛苦，此外它不能使用 try catch 捕获错误，不能直接 return。</p><ul><li>事件监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func.on(<span class="string">'done'</span>, func2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    func.trigger(<span class="string">'done'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”，有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。</p><ul><li>发布订阅</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); <span class="comment">// fileSystem</span></span><br><span class="line"><span class="comment">// 希望两次都完成 后 分别打印最终结果 在打印一次已经处理完毕</span></span><br><span class="line"><span class="comment">// 发布 emit 订阅 on  一种一对多的关系 [fn,fn,fn]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Events</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123; <span class="keyword">this</span>.stack = []; &#125;</span><br><span class="line">  on(callback) &#123; <span class="keyword">this</span>.stack.push(callback); &#125;</span><br><span class="line">  emit() &#123; <span class="keyword">this</span>.stack.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> callback()) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> events = <span class="keyword">new</span> Events();</span><br><span class="line"><span class="keyword">let</span> school = &#123;&#125;;</span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(school).length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(school)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">events.on(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'当前获取完毕'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端 服务端 好多原理都是基于发布订阅模式的</span></span><br><span class="line">fs.readFile(<span class="string">'./javascript/promise/name.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123; <span class="comment">// 5s</span></span><br><span class="line">  school.name = data;</span><br><span class="line">  events.emit();</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(<span class="string">'./javascript/promise/name.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123; <span class="comment">// 3s</span></span><br><span class="line">  school.age = data;</span><br><span class="line">  events.emit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法的性质与“事件监听”类似，但是明显优于后者。因为可以通过查看“消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p><h2 id="2-promise-介绍"><a href="#2-promise-介绍" class="headerlink" title="2. promise 介绍"></a>2. promise 介绍</h2><p>中文网：<a href="https://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/promise</a></p><p>promise 本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。符合 <a href="https://promisesaplus.com/" target="_blank" rel="noopener">promise A+ 规范</a>, 按照这个规范可以自己实现一个 promise.</p><p>promise 解决的问题:</p><ul><li>回调嵌套,回调地狱</li><li>错误捕获不好处理错误</li><li>多个异步同步的问题 Promise.all</li></ul><p>promise 的几种状态</p><ul><li>Pending—-Promise对象实例创建时候的初始状态</li><li>Fulfilled—-可以理解为成功的状态</li><li>Rejected—-可以理解为失败的状态</li></ul><blockquote><p>promise 一些特性：</p><ul><li>只有等待态 才能变成 成功 / 失败</li><li>如果状态变化后不能在修改状态</li><li>promise中会存放两个变量， value 和 reason<br>promise 的实例上，会有 then 方法</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认是等待态，可以转化成成功或者失败，状态更改后不能再更改状态</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">123</span>);</span><br><span class="line">  reject(<span class="number">222</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(promise)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="comment">// fulfilled</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>,value);</span><br><span class="line">&#125;,(reason) =&gt; &#123; <span class="comment">// rejected</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'失败'</span>,reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-promise-链式调用"><a href="#3-promise-链式调用" class="headerlink" title="3. promise 链式调用"></a>3. promise 链式调用</h2><ul><li>每次调用返回的都是一个新的 promise 实例(这就是 then 可用链式调用的原因)</li><li>如果 then 中返回的是一个结果的话会把这个结果传递下一次 then 中的成功回调</li><li>如果 then 中出现异常,会走下一个 then 的失败回调</li><li>在 then 中使用了return，那么 return 的值会被Promise.resolve() 包装</li><li>then 中可以不传递参数，如果不传递会透到下一个 then 中</li><li>catch 会捕获到没有捕获的异常</li><li>finally 是 es9 的，不管成功或者失败都会走，不会中断运行，只是传递一个一定会执行的函数而已</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./promise'</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.readFile(url, <span class="string">'utf8'</span>, (err, data)=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./javascript/promise/name.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// .catch(err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log('catch');</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// .finally(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log('finally');</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="4-promise-方法"><a href="#4-promise-方法" class="headerlink" title="4. promise 方法"></a>4. promise 方法</h2><ul><li>Promise.resolve() 将现有对象转为 Promise 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><ul><li>Promise.reject(reason) 方法也会返回一个新的 Promise 实例，该实例的状态为 rejected</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><ul><li>Promise.all() 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例, 常用于无关联多接口请求处理 promise.all 执行时，若有一个reject, 边终止。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><ul><li>Promise.race() 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><ul><li><p>Promise.allsettled() es2020 新增方法，用来解决 promise.all 执行时，若有一个 reject, 边终止的情况，还是会返回执行结果</p></li><li><p>Promise.any() 只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态</p></li></ul><h2 id="5-生成器-Generators-yield"><a href="#5-生成器-Generators-yield" class="headerlink" title="5. 生成器 Generators/ yield"></a>5. 生成器 Generators/ yield</h2><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同，Generator 最大的特点就是可以控制函数的执行。</p><blockquote><p>koa 1.0 在使用, koa2 废弃调了，使用 async + await</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器 -&gt; 迭代器</span></span><br><span class="line"><span class="comment">// 可以暂停执行 * 表示是一个生成器函数 yield 产出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator 返回的是生成器，生成器有一个 next 方法，调用这个方法，会返回一个对象，对象done,是否迭代完成，value 产出的结果</span></span><br><span class="line"><span class="keyword">let</span> iterator = read();</span><br><span class="line"><span class="built_in">console</span>.log(iterator);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="built_in">Object</span> [Generator] &#123;&#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个地方要提下什么是类数组</p><p>类数组 =&gt; 可以被迭代</p><p>也可以用 Array.prototype.slice.call(arrayLike)  来将类数组转化成数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="attr">length</span>: <span class="number">3</span>, [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="keyword">this</span>.length != index, <span class="attr">value</span>: <span class="keyword">this</span>[index++] &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="attr">length</span>: <span class="number">3</span>, [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index != <span class="keyword">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">this</span>[index++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>使用例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// try&#123;</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="keyword">yield</span> fs.readFile(<span class="string">'./name.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">let</span> age = <span class="keyword">yield</span> fs.readFile(content, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span> age + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">  <span class="comment">// &#125;catch(err)&#123;</span></span><br><span class="line">  <span class="comment">//     console.log(err);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = read();</span><br><span class="line"><span class="keyword">let</span> &#123; value, done &#125; = it.next();</span><br><span class="line">value.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; value, done &#125; = it.next(data);</span><br><span class="line">  value.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; value, done &#125; = it.next(data);</span><br><span class="line">    value.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; value, done &#125; = it.next(data);</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  it.throw(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看出嵌套很深，老问题，我们常用 co 库来解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">it</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步迭代 next</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>) </span>&#123; <span class="comment">// 如果碰到异步迭代，需要借助一个自执行函数来实现，保证第一次执行后调用下一次执行</span></span><br><span class="line">      <span class="keyword">let</span> &#123; value, done &#125; = it.next(data);</span><br><span class="line">      <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(value).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          next(data)</span><br><span class="line">        &#125;, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">co(read()).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-终极方法-async-await"><a href="#6-终极方法-async-await" class="headerlink" title="6. 终极方法 async + await"></a>6. 终极方法 async + await</h2><p>async + await 可以理解为 generator + co 语法糖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(file, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err)</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  read1()</span><br><span class="line">  read2() <span class="comment">// 这个函数同步执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">read1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">await</span> read(<span class="string">'1.txt'</span>,<span class="string">'utf8'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">read2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">await</span> read(<span class="string">'2.txt'</span>,<span class="string">'utf8'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;</span><br><span class="line">readAll() <span class="comment">// 2.txt 3.txt</span></span><br></pre></td></tr></table></figure><p>所以归纳一下 js 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</p><h2 id="7-如何自己实现一个-promise"><a href="#7-如何自己实现一个-promise" class="headerlink" title="7. 如何自己实现一个 promise"></a>7. 如何自己实现一个 promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断x的类型 来处理 promise2 是成功还是失败</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'TypeError: Chaining cycle detected for promise #&lt;Promise&gt;'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'function'</span> || (<span class="keyword">typeof</span> x === <span class="string">'object'</span> &amp;&amp; x != <span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;  <span class="comment">// then 可能是getter object.defineProperty</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;  <span class="comment">// &#123;then:null&#125; 就认为他是一个promise</span></span><br><span class="line">        then.call(x, y =&gt; &#123; <span class="comment">// 让当前的promise 执行，不用多次取 then 方法了</span></span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>; <span class="comment">// 1)</span></span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, r =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>; <span class="comment">// 2)</span></span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>; <span class="comment">// 3) 为了辨别这个promise 不能调用多次</span></span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span>; <span class="comment">// 默认当前状态是等待态</span></span><br><span class="line">    <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">this</span>.reason;</span><br><span class="line">    <span class="keyword">this</span>.onResolvedCallbacks = []; <span class="comment">// 存储成功的所有的回调 只有pending的时候才存储</span></span><br><span class="line">    <span class="keyword">this</span>.onRejectedCallbacks = []; <span class="comment">// 存储所有失败的</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123; <span class="comment">// 只有等待态的时候才能更改数据</span></span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'fulfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认会调用执行函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="comment">// onFulfilled onRejected 是 可选参数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">val</span> =&gt;</span> val;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line">    <span class="keyword">let</span> promise2;</span><br><span class="line">    <span class="comment">// 可以不停的调用then方法,必须返还一个新的promise</span></span><br><span class="line">    <span class="comment">// 异步的特点 等待当前主栈代码都执行后才执行</span></span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 为了保证Promise2 存在</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 需要对 then 的成功的回调 和失败的回调 取到他的返回结果， 如果是普通值就让promise2成功</span></span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            <span class="comment">// 对 x 的类型做 判断，常量可以直接抛出来，但是如果是promise 需要采用当前promise的状态</span></span><br><span class="line">            <span class="comment">// x 如果是普通值，直接调用Promise2 的resolve</span></span><br><span class="line">            <span class="comment">// x 如果是promsie, 让x这个promise执行 x.then</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onResolvedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(rejectFunc) &#123; <span class="comment">// 用来捕获错误 ， 语法糖</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, rejectFunc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个方法， 这个方法需要返回一个对象，对象上需要有 promise resolve reject 三个属性</span></span><br><span class="line"><span class="comment">// 希望测试一下这个库是否符合我们的promise A+规范  https://promisesaplus.com/</span></span><br><span class="line"><span class="comment">// promises-aplus-tests 文件名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.defer = <span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dfd = &#123;&#125;;</span><br><span class="line">  dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    dfd.resolve = resolve;</span><br><span class="line">    dfd.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> dfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(value);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> data);</span><br><span class="line">    <span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     resolve(callback()); // 如果callback是一个函数返回promise 就等待这个promise执行完毕</span></span><br><span class="line">    <span class="comment">// &#125;).then(()=&gt;data);</span></span><br><span class="line">    <span class="comment">// callback();</span></span><br><span class="line">    <span class="comment">// return data;</span></span><br><span class="line">  &#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;); <span class="comment">// koa 原理</span></span><br><span class="line">    <span class="comment">// throw err;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure><p>上面是我简单实现的 promise</p><p>如何测试该 promise 是否合格，可参考<a href="https://github.com/promises-aplus/promises-tests" target="_blank" rel="noopener">promise test</a></p><h2 id="8-其他工具"><a href="#8-其他工具" class="headerlink" title="8. 其他工具"></a>8. 其他工具</h2><ul><li>bbluebird 第三方库 实现 promise 化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 中已经借鉴了，所有的异步方法参数第一个都是err</span></span><br><span class="line"><span class="keyword">let</span> read = bluebird.promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./javascript/promise/name.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面自己实现一个 promisefy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="function">(<span class="params">fn</span>) =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//fs.readFile(path.resolve(__dirname,'1.txt'),'utf8',)</span></span><br><span class="line">    fn(...args, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> reject(err) &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promisifyAll = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj[key] = promisify(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mz 第三方包 他里面把所有的 node 模块, 都进行了包装promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'mz/fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'name.txt'</span>, <span class="string">'utf8'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-promise-的由来&quot;&gt;&lt;a href=&quot;#1-promise-的由来&quot; class=&quot;headerlink&quot; title=&quot;1. promise 的由来&quot;&gt;&lt;/a&gt;1. promise 的由来&lt;/h2&gt;&lt;h3 id=&quot;1-1-异步&quot;&gt;&lt;a href=&quot;#1-1-异步&quot; class=&quot;headerlink&quot; title=&quot;1.1 异步&quot;&gt;&lt;/a&gt;1.1 异步&lt;/h3&gt;&lt;p&gt;我们都知道 js 是单线程的，也就是说一次只能完成一件任务。如果有多个任务，就必须排队，等待前面一个任务完成，再执行后面一个任务。&lt;/p&gt;
&lt;p&gt;这种方式虽然实现起来比较简单，执行环境相对单纯，但是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段 js 代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，js 语言将任务的执行模式分成两种：同步和异步（异步任务不具有”堵塞“效应）。&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>关于 Less 的一些理解</title>
    <link href="http://yoursite.com/2020/03/19/less/"/>
    <id>http://yoursite.com/2020/03/19/less/</id>
    <published>2020-03-19T07:15:01.000Z</published>
    <updated>2020-03-20T10:02:42.690Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目用到 less 来做 css 预处理器，之前公司项目是用的 sass，所以抽空针对 less，重新了解了一番。</p><a id="more"></a><h2 id="1-Less-的由来"><a href="#1-Less-的由来" class="headerlink" title="1. Less 的由来"></a>1. Less 的由来</h2><p>[Less 中文官方网站]：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><p>官网：<a href="http://lesscss.org/" target="_blank" rel="noopener">http://lesscss.org/</a></p><p>在 Web 发展的这几年，有了 webpack 来做构建，所以为了让 CSS 富有逻辑性，短板(在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石)不那么严重，涌现出了一些神奇的预处理语言。 它们让 CSS 彻底变成一门可以使用变量、循环、继承、自定义方法等多种特性的标记语言，逻辑性得以大大增强。</p><p>其中 常见的有三种：Sass、Less 、Stylus 。</p><ul><li>Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并-且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li>Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li>Less 诞生于 2009 年，受 Sass 的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。</li></ul><p>如何选择？</p><p>这个问题其实不重要，主要看你们项目和团队的情况，如果你们团队成员都喜欢用 less, 那便选择它就行啦。</p><h2 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2. 如何使用"></a>2. 如何使用</h2><p>常见的有两种方式：</p><ul><li>在页面中 引入 Less.js，可在<a href="http://lesscss.org/" target="_blank" rel="noopener">官网</a>下载，或使用 CDN</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>在命令行 使用 npm 安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install -g less</span></span><br></pre></td></tr></table></figure><p>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lessc styles.less &gt; styles.css</span></span><br></pre></td></tr></table></figure><p>如果你使用了 webpack，那么你需要配合 less-loader 进行处理(这个网上很多文章有介绍)</p><h2 id="3-Less-常用功能特性"><a href="#3-Less-常用功能特性" class="headerlink" title="3. Less 常用功能特性"></a>3. Less 常用功能特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><p>我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。</p><ul><li>值变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 @ 开头 定义变量</span></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#999</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> red;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">50%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常我们在实际项目中会把变量定义存到到一个文件，方便维护。</p><ul><li>选择器变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@mySelector:</span> #wrap;</span><br><span class="line"><span class="variable">@Wrap:</span> wrap;</span><br><span class="line"><span class="variable">@&#123;mySelector&#125;</span> &#123; <span class="comment">// 变量名 必须使用大括号包裹</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;Wrap&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#@&#123;Wrap&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@borderStyle:</span> border-style;</span><br><span class="line"><span class="variable">@Soild:</span> solid;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">@&#123;borderStyle&#125;</span>: <span class="variable">@Soild</span>; <span class="comment">// 变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>url 变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>; <span class="comment">// 需要加引号</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/dog.png"</span>);<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"../img/dog.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明变量</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@background:</span> &#123;<span class="attribute">background</span>:red;&#125;;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="variable">@background</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@Rules:</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="variable">@Rules</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变量运算</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">300px</span>;</span><br><span class="line"><span class="variable">@color:</span> <span class="number">#222</span>;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width-20</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@width-</span> <span class="number">20</span> * <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">margin</span>:(<span class="variable">@width</span> - <span class="number">20</span>) *  <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span> + <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变量作用域</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@var:</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="variable">@a:</span> <span class="number">100%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@var</span>;</span><br><span class="line">  <span class="variable">@a:</span> <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@fnord:</span>  <span class="string">"I am fnord."</span>;</span><br><span class="line"><span class="variable">@var:</span>    <span class="string">"fnord"</span>;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">@@var</span>; <span class="comment">//将@var替换为其值 content:@fnord;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I am fnord."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-嵌套"><a href="#3-2-嵌套" class="headerlink" title="3.2 嵌套"></a>3.2 嵌套</h3><ul><li>&amp; 使用</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">_content</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#header</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header_content</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>媒体查询</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="keyword">@media</span> screen&#123;</span><br><span class="line">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> tv &#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> tv&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-混合方法"><a href="#3-3-混合方法" class="headerlink" title="3.3 混合方法"></a>3.3 混合方法</h3><ul><li>无参数方法</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123; <span class="comment">// 等价于 .card()</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="selector-class">.card</span>; <span class="comment">// 等价于 .card();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认参数方法</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@a</span>:<span class="number">10px</span>,<span class="variable">@b</span>:<span class="number">50px</span>,<span class="variable">@c</span>:<span class="number">30px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>; <span class="comment">// 指代的是 全部参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>;<span class="comment">//等价于 .border()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>条件筛选 when</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>&#123;</span><br><span class="line">    <span class="comment">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span></span><br><span class="line">    <span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>,<span class="variable">@style</span>) <span class="keyword">when</span> (<span class="variable">@width</span>&gt;<span class="number">100px</span>) <span class="keyword">and</span>(<span class="variable">@color</span>=<span class="number">#999</span>)&#123;</span><br><span class="line">        <span class="attribute">border</span>:<span class="variable">@style</span> <span class="variable">@color</span> <span class="variable">@width</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span></span><br><span class="line">    <span class="selector-class">.background</span>(<span class="variable">@color</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@color</span>&gt;=<span class="number">#222</span>)&#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="variable">@color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span></span><br><span class="line">    <span class="selector-class">.font</span>(<span class="variable">@size</span>:<span class="number">20px</span>) <span class="keyword">when</span> (<span class="variable">@size</span>&gt;<span class="number">50px</span>) , (<span class="variable">@size</span>&lt;<span class="number">100px</span>)&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">@size</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span>&gt;<span class="selector-class">.border</span>(<span class="number">200px</span>,<span class="number">#999</span>,solid);</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.background</span>(<span class="number">#111</span>);</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.font</span>(<span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:solid <span class="number">#999</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数量不定的参数</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>(...)&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textShadow</span>(<span class="variable">@a</span>,...)&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.boxShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">    <span class="selector-class">.textShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>!important 使用</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>() !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性拼接方法</li></ul><p>+_ 代表的是 空格；+ 代表的是 逗号</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>() &#123;</span><br><span class="line">    <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.boxShadow</span>();</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Animation</span>() &#123;</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.Animation</span>();</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">2</span>) rotate(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</span><br><span class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>); <span class="comment">// 调用 方法</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;    <span class="comment">// 使用返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-继承"><a href="#3-4-继承" class="headerlink" title="3.4 继承"></a>3.4 继承</h3><ul><li>extend</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.animation</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">    <span class="selector-class">.hide</span>&#123;</span><br><span class="line">      <span class="attribute">transform</span>:scale(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation</span> <span class="selector-class">.hide</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.animation</span>, <span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> <span class="selector-class">.hide</span> , <span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:scale(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>all 全局继承</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:extend(</span><span class="selector-id">#main</span> <span class="keyword">all</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>,<span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#wrap</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"Less is good!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-导入"><a href="#3-5-导入" class="headerlink" title="3.5 导入"></a>3.5 导入</h3><ul><li>@import</li></ul><h3 id="3-6-函数"><a href="#3-6-函数" class="headerlink" title="3.6 函数"></a>3.6 函数</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">#ff0</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">saturate</span>(hsl(<span class="number">90</span>, <span class="number">80%</span>, <span class="number">50%</span>), <span class="number">20%</span>) <span class="comment">// #80ff00 // hsl(90, 100%, 50%)</span></span><br></pre></td></tr></table></figure><p><a href="http://lesscss.cn/functions/" target="_blank" rel="noopener">查看更多函数链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目用到 less 来做 css 预处理器，之前公司项目是用的 sass，所以抽空针对 less，重新了解了一番。&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="less" scheme="http://yoursite.com/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>关于我对 ESlint 的理解</title>
    <link href="http://yoursite.com/2020/03/12/eslint/"/>
    <id>http://yoursite.com/2020/03/12/eslint/</id>
    <published>2020-03-12T04:20:50.000Z</published>
    <updated>2020-03-12T06:30:17.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-eslint-介绍"><a href="#1-eslint-介绍" class="headerlink" title="1. eslint 介绍"></a>1. eslint 介绍</h2><p>eslint 属于一种 QA 工具，是一个 ECMAScript/JavaScript 语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p><p>eslint 完全可配置，它的目标是提供一个插件化的 javascript 代码检测工具。这意味着您可以关闭每个规则，只能使用基本语法验证，或者混合并匹配捆绑的规则和自定义规则，使 eslint 完美的适用于当前项目。</p><p>[ESLint 中文官方网站]：<a href="http://eslint.cn/" target="_blank" rel="noopener">http://eslint.cn/</a></p><p>官网：<a href="https://eslint.org/" target="_blank" rel="noopener">https://eslint.org/</a></p><a id="more"></a><h2 id="2-lint-工具发展过程"><a href="#2-lint-工具发展过程" class="headerlink" title="2. lint 工具发展过程"></a>2. lint 工具发展过程</h2><p>在 JavaScript 20 多年的发展历程中，也出现过许许多多的 lint 工具，下面就来介绍下主流的三款 lint 工具。</p><p><img src="/images/eslint.jpg" alt="img"></p><ul><li>JSLint</li></ul><p>JSLint 可以说是最早出现的 JavaScript 的 lint 工具，由 Douglas Crockford (《JavaScript 语言精粹》作者) 开发。JSLint 的所有规则都是由 Douglas 自己定义的，可以说这是一个极具 Douglas 个人风格的 lint 工具，如果你要使用它，就必须接受它所有规则。值得称赞的是，JSLint 依然在更新，而且也提供了 node 版本：<a href="https://www.npmjs.com/package/jslint" target="_blank" rel="noopener">node-jslint</a>。</p><ul><li>JSHint</li></ul><p>由于 JSLint 让很多人无法忍受它的规则，感觉受到了压迫，所以 Anton Kovalyov 基于 JSLint 开发了 JSHint。JSHint 在 JSLint 的基础上提供了丰富的配置项，给了开发者极大的自由，JSHint 一开始就保持着开源软件的风格，由社区进行驱动，发展十分迅速。早起 jQuery 也是使用 JSHint 进行代码检查的，不过现在已经转移到 ESLint 了。</p><ul><li>ESLint</li></ul><p>ESLint 由 Nicholas C. Zakas (《JavaScript 高级程序设计》作者) 于2013年6月创建，它的出现因为 Zakas 想使用 JSHint 添加一条自定义的规则，但是发现 JSHint 不支持，于是自己开发了一个。</p><p>ESLint 号称下一代的 JS Linter 工具，它的灵感来源于 PHP Linter，将源代码解析成 AST，然后检测 AST 来判断代码是否符合规则。ESLint 使用 esprima 将源代码解析成 AST，然后你就可以使用任意规则来检测 AST 是否符合预期，这也是 ESLint 高可扩展性的原因。</p><p>但是，那个时候 ESLint 并没有大火，因为需要将源代码转成 AST，运行速度上输给了 JSHint ，并且 JSHint 当时已经有完善的生态（编辑器的支持）。真正让 ESLint 大火是因为 ES6 的出现。</p><p>ES6 发布后，因为新增了很多语法，JSHint 短期内无法提供支持，而 ESLint 只需要有合适的解析器就能够进行 lint 检查。这时 babel 为 ESLint 提供了支持，开发了 babel-eslint，让 ESLint 成为最快支持 ES6 语法的 lint 工具。</p><p>在 2016 年，ESLint 整合了与它同时诞生的另一个 lint 工具：<a href="https://www.npmjs.com/package/jscs" target="_blank" rel="noopener">JSCS</a>，因为它与 ESLint 具有异曲同工之妙，都是通过生成 AST 的方式进行规则检测。</p><h2 id="3-lint-工具优点"><a href="#3-lint-工具优点" class="headerlink" title="3. lint 工具优点"></a>3. lint 工具优点</h2><ul><li>避免低级 bug，找出可能发生的语法错误</li></ul><p>使用未声明变量、修改 const 变量</p><ul><li><p>提示删除多余的代码</p></li><li><p>确保代码遵循最佳实践</p></li></ul><p>可参考 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb style</a>、<a href="https://github.com/standard/standard" target="_blank" rel="noopener">javascript standard</a>, <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">AlloyTeam  eslint-config-alloy</a></p><ul><li>统一团队的代码风格</li></ul><p>加不加分号、使用 tab 还是空格</p><h2 id="4-如何使用"><a href="#4-如何使用" class="headerlink" title="4. 如何使用"></a>4. 如何使用</h2><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><p>如何在项目中引入 eslint:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 ESLint</span><br><span class="line">$ npm install -g eslint</span><br><span class="line"></span><br><span class="line"># 进入项目</span><br><span class="line">$ cd ~<span class="regexp">/workspace/</span>project</span><br><span class="line"></span><br><span class="line"># 初始化 ESLint 配置</span><br><span class="line">$ eslint --init</span><br></pre></td></tr></table></figure><p>在使用 eslint –init 后，会出现很多用户配置项，具体可以参考：<a href="https://github.com/eslint/eslint/blob/v6.0.1/lib/init/config-initializer.js#L432" target="_blank" rel="noopener">eslint cli 部分的源码</a>。</p><p>经过一系列一问一答的环节后，你会发现在你文件夹的根目录生成了一个 .eslintrc.js 文件。</p><h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><p>ESLint 一共有两种配置方式：</p><ul><li>使用注释把 lint 规则直接嵌入到源代码中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ~/workspace/project/src/test.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint eqeqeq: "error" */</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">1</span></span><br><span class="line">num == <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>这时运行 <code>eslint src/test.js</code> 会报错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expected <span class="string">'==='</span> and instead saw <span class="string">'=='</span></span><br></pre></td></tr></table></figure><p>当然我们一般使用注释是为了临时禁止某些严格的 lint 规则出现的警告</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">'该注释放在文件顶部，整个文件都不会出现 lint 警告'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br><span class="line">alert(<span class="string">'重新启用 lint 告警'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">'只禁止某一个或多个规则'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable-next-line */</span></span><br><span class="line">alert(<span class="string">'当前行禁止 lint 警告'</span>)</span><br><span class="line"></span><br><span class="line">alert(<span class="string">'当前行禁止 lint 警告'</span>) <span class="comment">// eslint-disable-line</span></span><br></pre></td></tr></table></figure><ul><li>使用配置文件进行 lint 规则配置</li></ul><p>在初始化过程中，有一个选项就是使用什么文件类型进行 lint 配置（What format do you want your config file to be in?）</p><p>官方一共提供了三个选项：</p><blockquote><ul><li>JavaScript (eslintrc.js)</li><li>YAML (eslintrc.yaml)</li><li>JSON (eslintrc.json)</li></ul></blockquote><p>翻阅 ESLint <a href="https://github.com/eslint/eslint/blob/v6.0.1/lib/cli-engine/config-array-factory.js#L52" target="_blank" rel="noopener">源码</a> 可以看到，其配置文件的优先级如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先级按定义从上往下依次降低</span></span><br><span class="line"><span class="keyword">const</span> configFilenames = [</span><br><span class="line">  <span class="string">".eslintrc.js"</span>,</span><br><span class="line">  <span class="string">".eslintrc.yaml"</span>,</span><br><span class="line">  <span class="string">".eslintrc.yml"</span>,</span><br><span class="line">  <span class="string">".eslintrc.json"</span>,</span><br><span class="line">  <span class="string">".eslintrc"</span>,</span><br><span class="line">  <span class="string">"package.json"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="4-3-项目级与目录级的配置"><a href="#4-3-项目级与目录级的配置" class="headerlink" title="4.3 项目级与目录级的配置"></a>4.3 项目级与目录级的配置</h3><p>我们有如下目录结构，此时在根目录运行 ESLint，那么我们将得到两个配置文件 .eslintrc.js（项目级配置） 和 src/.eslintrc.js（目录级配置），这两个配置文件会进行合并，但是 src/.eslintrc.js 具有更高的优先级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project 项目文件目录</span></span><br><span class="line">.</span><br><span class="line">├── src</span><br><span class="line">│   ├── .eslintrc.js</span><br><span class="line">├── .eslintrc.js</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是，我们只要在 src/.eslintrc.js 中配置 “root”: true，那么 ESLint 就会认为 src 目录为根目录，不再向上查找配置。</p><h3 id="4-4-配置参数"><a href="#4-4-配置参数" class="headerlink" title="4.4 配置参数"></a>4.4 配置参数</h3><ul><li>解析器配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 解析器类型</span></span><br><span class="line">  <span class="comment">// espima(默认), babel-eslint, @typescript-eslint/parse</span></span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"esprima"</span>,</span><br><span class="line">  <span class="comment">// 解析器配置参数</span></span><br><span class="line">  <span class="string">"parseOptions"</span>: &#123;</span><br><span class="line">    <span class="comment">// 代码类型：script(默认), module</span></span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"script"</span>,</span><br><span class="line">    <span class="comment">// es 版本号，默认为 5，也可以是用年份，比如 2015 (同 6)</span></span><br><span class="line">    <span class="string">"ecamVersion"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="comment">// es 特性配置</span></span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">        <span class="string">"globalReturn"</span>: <span class="literal">true</span>, <span class="comment">// 允许在全局作用域下使用 return 语句</span></span><br><span class="line">        <span class="string">"impliedStrict"</span>: <span class="literal">true</span>, <span class="comment">// 启用全局 strict mode</span></span><br><span class="line">        <span class="string">"jsx"</span>: <span class="literal">true</span> <span class="comment">// 启用 JSX</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 @typescript-eslint/parse 这个解析器，主要是为了替代之前存在的 TSLint，TS 团队因为 ESLint 生态的繁荣，且 ESLint 具有更多的配置项，不得不抛弃 TSLint 转而实现一个 ESLint 的解析器。同时，该解析器拥有 <a href="https://www.npmjs.com/package/@typescript-eslint/parser#configuration" target="_blank" rel="noopener">@typescript-eslint/parse 不同配置</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">      <span class="string">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"useJSXTextNode"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"project"</span>: <span class="string">"./tsconfig.json"</span>,</span><br><span class="line">    <span class="string">"tsconfigRootDir"</span>: <span class="string">"../../"</span>,</span><br><span class="line">    <span class="string">"extraFileExtensions"</span>: [<span class="string">".vue"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>环境与全局变量</li></ul><p>ESLint 会检测未声明的变量，并发出警告，但是有些变量是我们引入的库声明的，这里就需要提前在配置中声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="comment">// 声明 jQuery 对象为全局变量</span></span><br><span class="line">    <span class="string">"$"</span>: <span class="literal">false</span> <span class="comment">// true表示该变量为 writeable，而 false 表示 readonly</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 globals 中一个个的进行声明未免有点繁琐，这个时候就需要使用到 env ，这是对一个环境定义的一组全局变量的预设（类似于 babel 的 presets）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"amd"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选的环境很多，预设值都在 <a href="https://github.com/eslint/eslint/blob/v6.0.1/conf/environments.js" target="_blank" rel="noopener">这个文件</a> 中进行定义，查看源码可以发现，其预设变量都引用自 globals 包。</p><h3 id="4-5-规则配置"><a href="#4-5-规则配置" class="headerlink" title="4.5 规则配置"></a>4.5 规则配置</h3><p>ESLint 附带有 <a href="https://cn.eslint.org/docs/rules/" target="_blank" rel="noopener">大量的规则</a>，你可以在配置文件的 rules 属性中配置你想要的规则。每一条规则接受一个参数，参数的值如下：</p><ul><li>“off” 或 0：关闭规则</li><li>“warn” 或 1：开启规则，warn 级别的错误 (不会导致程序退出)</li><li>“error” 或 2：开启规则，error级别的错误(当被触发的时候，程序会退出)</li></ul><p><img src="/images/eslint-2.jpg" alt="img2"></p><p>但是，事情往往没有我们想象中那么简单，ESLint 的规则不仅只有关闭和开启这么简单，每一条规则还有自己的配置项。如果需要对某个规则进行配置，就需要使用数组形式的参数, 如下 <a href="https://eslint.org/docs/rules/quotes" target="_blank" rel="noopener">quotes 规则设置</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用数组形式，对规则进行配置</span></span><br><span class="line">    <span class="comment">// 第一个参数为是否启用规则</span></span><br><span class="line">    <span class="comment">// 后面的参数才是规则的配置项</span></span><br><span class="line">    <span class="string">"quotes"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      <span class="string">"single"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"avoidEscape"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照如上规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"test 'ESLint' rule"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'test "ESLint" rule'</span></span><br></pre></td></tr></table></figure><h2 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5 扩展"></a>5 扩展</h2><p>扩展就是直接使用别人已经写好的 lint 规则，方便快捷。扩展一般支持三种类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">    <span class="string">"eslint-config-standard"</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>eslint: 开头的是 ESLint 官方的扩展，一共有两个：<a href="https://github.com/eslint/eslint/blob/v6.0.1/conf/eslint-recommended.js" target="_blank" rel="noopener">eslint:recommended</a> 、<a href="https://github.com/eslint/eslint/blob/master/conf/eslint-all.js" target="_blank" rel="noopener">eslint:all</a>。</li><li>plugin: 开头的是扩展是插件类型，也可以直接在 plugins 属性中进行设置。</li><li>最后一种扩展来自 npm 包，官方规定 npm 包的扩展必须以 eslint-config- 开头，使用时可以省略这个头，上面案例中 eslint-config-standard 可以直接简写成 standard</li></ul><p>如果你觉得自己的配置十分满意，也可以将自己的 lint 配置发布到 npm 包，只要将包名命名为 eslint-config-xxx 即可，同时，需要在 package.json 的 <a href="https://www.cnblogs.com/wonyun/p/9692476.html" target="_blank" rel="noopener">peerDependencies</a> 字段中声明你依赖的 ESLint 的版本号。</p><h2 id="6-插件"><a href="#6-插件" class="headerlink" title="6. 插件"></a>6. 插件</h2><p>虽然官方提供了上百种的规则可供选择，但是这还不够，因为官方的规则只能检查标准的 JavaScript 语法，如果你写的是 JSX 或者 Vue 单文件组件，ESLint 的规则就开始束手无策了。</p><p>这个时候就需要安装 ESLint 的插件，来定制一些特定的规则进行检查。ESLint 的插件与扩展一样有固定的命名格式，以 eslint-plugin- 开头，使用的时候也可以省略这个头。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install --save-dev eslint-plugin-vue eslint-plugin-react</span></span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"react"</span>, <span class="comment">// eslint-plugin-react</span></span><br><span class="line">    <span class="string">"vue"</span>,   <span class="comment">// eslint-plugin-vue</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是在扩展中引入插件，前面有提到 plugin: 开头的是扩展是进行插件的加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L108" target="_blank" rel="noopener">eslint-plugin-react 源码</a> 可以看到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 自定义的 rule</span></span><br><span class="line">  rules: allRules,</span><br><span class="line">  <span class="comment">// 可用的扩展</span></span><br><span class="line">  configs: &#123;</span><br><span class="line">    <span class="comment">// plugin:react/recommended</span></span><br><span class="line">    recomended: &#123;</span><br><span class="line">      plugins: [ <span class="string">'react'</span> ]</span><br><span class="line">      rules: &#123;...&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugin:react/all</span></span><br><span class="line">    all: &#123;</span><br><span class="line">      plugins: [ <span class="string">'react'</span> ]</span><br><span class="line">      rules: &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置名是插件配置的 configs 属性定义的，这里的配置其实就是 ESLint 的扩展，通过这种方式即可以加载插件，又可以加载扩展</p><h3 id="6-1-开发插件"><a href="#6-1-开发插件" class="headerlink" title="6.1 开发插件"></a>6.1 开发插件</h3><p>ESLint 官方为了方便开发者，提供了 Yeoman 的模板（<a href="https://www.npmjs.com/package/generator-eslint" target="_blank" rel="noopener">generator-eslint</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模块</span></span><br><span class="line">npm install -g yo generator-eslint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir eslint-plugin-demo</span><br><span class="line"><span class="built_in">cd</span> eslint-plugin-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模板</span></span><br><span class="line">yo eslint:plugin</span><br></pre></td></tr></table></figure><p>创建好项目之后，就可以开始创建一条规则了，幸运的是 generator-eslint 除了能够生成插件的模板代码外，还具有创建规则的模板代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成模板</span></span><br><span class="line">yo eslint:rule</span><br></pre></td></tr></table></figure><p>打开 lib/rules/rule-demo.js ，可以看到默认的模板代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  meta: &#123;</span><br><span class="line">    docs: &#123;</span><br><span class="line">      description: <span class="string">"disable console"</span>,</span><br><span class="line">      category: <span class="string">"Fill me in"</span>,</span><br><span class="line">      recommended: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    schema: []</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// variables should be defined here</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// give me methods</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>详细的参数介绍可以查看<a href="https://cn.eslint.org/docs/developer-guide/working-with-rules#rule-basics" target="_blank" rel="noopener">官方文档</a></p><p>具体示例可以参考 <a href="https://juejin.im/post/5d3d3a685188257206519148#heading-24" target="_blank" rel="noopener">博文</a></p><h2 id="7-忽略文件"><a href="#7-忽略文件" class="headerlink" title="7. 忽略文件"></a>7. 忽略文件</h2><p>我们的整个项目中，有一些文件是不需要 eslint 进行检查，我们可以用到忽略文件。</p><p>在我们的工程目录中新建一个文件，命名为 “.eslintignore” ，eslint 会自动识别这个文件</p><ul><li>您可以通过提供不同文件的路径来覆盖此行为。–ignore-path</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eslint --ignore-path tmp/.eslintignore file.js</span><br><span class="line">eslint --ignore-path .gitignore file.js</span><br></pre></td></tr></table></figure><ul><li>–no-ignore  禁用从文件的排除 .eslintignore ， –ignore-path 和 –ignore-pattern</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --no-ignore file.js</span><br></pre></td></tr></table></figure><p>比如，你已经在忽略文件 .eslintignore 中忽略了某文件，但是你又在命令行中执行了 eslint 该文件，则为警告提示，您可以使用 –no-ignore 忽略使用忽略规则。</p><ul><li>在 package.json 中使用 eslintIgnore</li></ul><p>如果 .eslintignore 未找到文件并且未指定备用文件，ESLint 将在 package.json 中查找 eslintIgnore 密钥以检查要忽略的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mypackage"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="string">"eslintConfig"</span>: &#123;</span><br><span class="line">      <span class="string">"env"</span>: &#123;</span><br><span class="line">          <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"eslintIgnore"</span>: [<span class="string">"hello.js"</span>, <span class="string">"world.js"</span>]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-工程应用"><a href="#8-工程应用" class="headerlink" title="8. 工程应用"></a>8. 工程应用</h2><p>实际工程中，我们一般会搭配一些优秀的插件和第三方库构建工作流。</p><ul><li><p>搭配使用 <a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">Prettier</a> 统一代码风格</p></li><li><p>npm 安装 husky 和 lint-staged，配置 git 检查工作流</p></li></ul><p>下面是 我项目中用到的一些配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"..."</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"..."</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"lint:style"</span>: <span class="string">"stylelint \"src/**/*.scss\" --syntax scss"</span>,</span><br><span class="line">    <span class="string">"lint:style-fix"</span>: <span class="string">"stylelint \"src/**/*.scss\" --syntax scss --fix"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint src --ext .ts,.tsx"</span>,</span><br><span class="line">    <span class="string">"lint-fix"</span>: <span class="string">"eslint src --fix --ext .ts,.tsx"</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"husky"</span>: &#123;</span><br><span class="line">    <span class="string">"hooks"</span>: &#123;</span><br><span class="line">      <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"src/**/*.&#123;ts,tsx&#125;"</span>: [</span><br><span class="line">      <span class="string">"eslint --fix"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"src/**/*.scss"</span>: [</span><br><span class="line">      <span class="string">"stylelint --config=.stylelintrc --fix"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"plugin:@typescript-eslint/recommended"</span>,</span><br><span class="line">    <span class="string">"react-app"</span>,</span><br><span class="line">    <span class="string">"prettier/@typescript-eslint"</span>,</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"react"</span>, <span class="string">"@typescript-eslint"</span>, <span class="string">"prettier"</span>],</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"jasmine"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"jest"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"prettier/prettier"</span>: [<span class="string">"error"</span>, &#123;</span><br><span class="line">      <span class="string">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"endOfLine"</span>: <span class="string">"auto"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"@typescript-eslint/interface-name-prefix"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="string">"@typescript-eslint/explicit-member-accessibility"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"@typescript-eslint/explicit-function-return-type"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"@typescript-eslint/no-angle-bracket-type-assertion"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"@typescript-eslint/array-type"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"jsx-a11y/anchor-is-valid"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"@typescript-eslint/parser"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-eslint-介绍&quot;&gt;&lt;a href=&quot;#1-eslint-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. eslint 介绍&quot;&gt;&lt;/a&gt;1. eslint 介绍&lt;/h2&gt;&lt;p&gt;eslint 属于一种 QA 工具，是一个 ECMAScript/JavaScript 语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。&lt;/p&gt;
&lt;p&gt;eslint 完全可配置，它的目标是提供一个插件化的 javascript 代码检测工具。这意味着您可以关闭每个规则，只能使用基本语法验证，或者混合并匹配捆绑的规则和自定义规则，使 eslint 完美的适用于当前项目。&lt;/p&gt;
&lt;p&gt;[ESLint 中文官方网站]：&lt;a href=&quot;http://eslint.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://eslint.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://eslint.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="eslint" scheme="http://yoursite.com/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 一些工具泛型的使用小结</title>
    <link href="http://yoursite.com/2019/07/26/TS%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/26/TS一些工具泛型的使用/</id>
    <published>2019-07-26T09:34:01.000Z</published>
    <updated>2019-11-28T06:56:42.649Z</updated>
    
    <content type="html"><![CDATA[<p>在 TypeScript（下面统一简称 TS）中默认内置了很多工具泛型，能够合理灵活的使用这些工具，可以使我们的类型定义更加灵活，严谨。最近用 TS 重构了一版工程，下面是我根据自己的理解以及日常使用做的一些总结。</p><p>这些泛型定义在 <a href="https://github.com/microsoft/TypeScript/blob/master/lib/lib.es5.d.ts" target="_blank" rel="noopener">node_modules/typescript/lib/lib.es5.d.ts</a> 文件中，大概是从 1400 多行开始。所以，有兴趣也可以研究一下它们的源码实现，很有意思。<br><a id="more"></a></p><h2 id="1-Partial"><a href="#1-Partial" class="headerlink" title="1. Partial"></a>1. Partial</h2><p>Partial 作用是将传入的属性变为可选项。</p><p>首先我们需要理解两个关键字 keyof 和 in, keyof 可以用来取得一个对象接口的所有 key 值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Foo &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line">type T = keyof Foo <span class="comment">// -&gt; "name" | "age"</span></span><br></pre></td></tr></table></figure><p>而 in 则可以遍历枚举类型, 例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Keys = <span class="string">"a"</span> | <span class="string">"b"</span></span><br><span class="line">type Obj =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: any</span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any &#125;</span></span><br></pre></td></tr></table></figure><p>keyof 产生联合类型, in 则可以遍历枚举类型, 所以他们经常一起使用</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面语句的意思是 keyof T 拿到 T 所有属性名, 然后 in 进行遍历, 将值赋给 P, 最后 T[P] 取得相应属性的值。结合中间的 ? 使属性可选。</p><h2 id="2-Required"><a href="#2-Required" class="headerlink" title="2. Required"></a>2. Required</h2><p>Required 作用是将传入的属性变为必选项。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Required&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们发现一个有意思的用法 -?, 这里很好理解就是将可选项代表的 ? 去掉, 从而让这个类型变成必选项. 与之对应的还有个 +? , 这个含义自然与 -? 之前相反, 它是用来把属性变成可选项的。</p><h2 id="3-Readonly"><a href="#3-Readonly" class="headerlink" title="3. Readonly"></a>3. Readonly</h2><p>Readonly 作用是将传入的属性变为只读选项。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Readonly&lt;T&gt; = &#123;</span><br><span class="line">  readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-Pick"><a href="#4-Pick" class="headerlink" title="4. Pick"></a>4. Pick</h2><p>Pick 作用是从 T 中将所有的 K 取出来，并生成一个新的类型。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-Record"><a href="#5-Record" class="headerlink" title="5. Record"></a>5. Record</h2><p>Record 作用是将 K 中所有的属性的值转化为 T 类型。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Record&lt;K extends keyof any, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-Exclude"><a href="#6-Exclude" class="headerlink" title="6. Exclude"></a>6. Exclude</h2><p>Exclude 作用是从 T 中排除掉所有包含的 U 属性。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Exclude&lt;T, U&gt; = T extends U ? never : T;</span><br></pre></td></tr></table></figure><h2 id="7-Extract"><a href="#7-Extract" class="headerlink" title="7. Extract"></a>7. Extract</h2><p>Extract 作用正好和上面的 Exclude 相反。而是从 T 中提取出所有包含的 U 属性值。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Extract&lt;T, U&gt; = T extends U ? T : never;</span><br></pre></td></tr></table></figure><h2 id="8-Omit"><a href="#8-Omit" class="headerlink" title="8. Omit"></a>8. Omit</h2><p>Omit 作用是用来忽略 T 中的 K 属性。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line">type Foo = Omit&lt;&#123;<span class="attr">name</span>: string, <span class="attr">age</span>: number&#125;, <span class="string">'name'</span>&gt; <span class="comment">// -&gt; &#123; age: number &#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-NonNullable"><a href="#9-NonNullable" class="headerlink" title="9. NonNullable"></a>9. NonNullable</h2><p>NonNullable 作用是去除 T 中包含的 null 或者 undefined。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type NonNullable&lt;T&gt; = T extends <span class="literal">null</span> | <span class="literal">undefined</span> ? never : T;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type TFoo = <span class="number">1</span> | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo: NonNullable&lt;TFoo&gt; = <span class="number">1</span> <span class="comment">// 正确</span></span><br><span class="line">foo = <span class="literal">null</span> <span class="comment">// 错误，因为这个值已经被去除</span></span><br></pre></td></tr></table></figure><h2 id="10-Parameters"><a href="#10-Parameters" class="headerlink" title="10. Parameters"></a>10. Parameters</h2><p>Parameters 作用是用来获取一个函数的参数类型，而且返回的是只能包含一组类型的数组。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Parameters&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Func = <span class="function">(<span class="params">user: string</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">type Param = Parameters&lt;Func&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: Param = [<span class="string">'1'</span>] <span class="comment">// 正确</span></span><br><span class="line">p = [<span class="string">'1'</span>, <span class="string">'2'</span>] <span class="comment">// 错误，只能包含一个字符串类型值</span></span><br></pre></td></tr></table></figure><p>通过上面的示例可以看到通过 Parameters 获取到了 Func 的参数类型，并返回的是数组形式：[string]。因此，变量p的赋值就只能是包含一个字符串类型值的数组。</p><h2 id="11-ConstructorParameters"><a href="#11-ConstructorParameters" class="headerlink" title="11. ConstructorParameters"></a>11. ConstructorParameters</h2><p>ConstructorParameters 作用是用来获取一个类的构造函数参数类型，并以数组的形式返回。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ConstructorParameters&lt;T extends <span class="keyword">new</span> (...args: any) =&gt; any&gt; = T extends <span class="keyword">new</span> (...args: infer P) =&gt; any ? P : never;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 Foo 的构造函数有两个参数，第一个为 string 类型，第二个为 number 类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: number)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在使用 ConstructorParameters 处理之后，获取到的是一个类型数组。而且第一个值必须为 string 类型，第二个值必须为 number 类型。</span></span><br><span class="line"><span class="keyword">const</span> foo: ConstructorParameters&lt;<span class="keyword">typeof</span> Foo&gt; = [<span class="string">'1'</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="12-ReturnType"><a href="#12-ReturnType" class="headerlink" title="12. ReturnType"></a>12. ReturnType</h2><p>ReturnType 作用是用来得到一个函数的返回值类型。</p><p>在阅读源码之前我们需要了解一下 infer 这个关键字, 在条件类型语句中, 我们可以用 infer 声明一个类型变量并且对它进行使用, 我们可以用它获取函数的返回类型。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure><p>其实这里的 infer R 就是声明一个变量来承载传入函数签名的返回值类型, 简单说就是用它取到函数返回值的类型方便之后使用.</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 ReturnType 获取到 Func 的返回值类型为 string，所以，foo 也就只能被赋值为字符串了</span></span><br><span class="line">type Func = <span class="function">(<span class="params">value: number</span>) =&gt;</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo: ReturnType&lt;Func&gt; = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h2 id="13-InstanceType"><a href="#13-InstanceType" class="headerlink" title="13. InstanceType"></a>13. InstanceType</h2><p>InstanceType 作用是获取一个类的实例类型，可以用获取到的实例类型来约束一个变量的赋值必须和类的成员类型完全一样才可以。</p><p>在 TS 中的源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type InstanceType&lt;T extends <span class="keyword">new</span> (...args: any) =&gt; any&gt; = T extends <span class="keyword">new</span> (...args: any) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义的类 Foo 中有一个字符串类型的 x，一个数字类型的 y，一个参数为字符串类型的方法 say</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  public x = <span class="string">'1'</span></span><br><span class="line">  public y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  public say = <span class="function">(<span class="params">value: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们用 InstanceType 获取类 Foo 的实例类型，用来它约束变量 foo。那么，接下来给foo赋值时就必须完全符合 Foo 的成员类型才可以</span></span><br><span class="line"><span class="keyword">const</span> foo: InstanceType&lt;<span class="keyword">typeof</span> Foo&gt; = &#123;</span><br><span class="line">  x: <span class="string">'1'</span>,</span><br><span class="line">  y: <span class="number">2</span>,</span><br><span class="line">  say: <span class="function">(<span class="params">value: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设你将变量foo中的x值赋值为数字 1，就肯定会收到类型检查错误了：</span></span><br><span class="line"><span class="comment">// Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><h2 id="14-自定义类型别名（非内置类型定义）"><a href="#14-自定义类型别名（非内置类型定义）" class="headerlink" title="14. 自定义类型别名（非内置类型定义）"></a>14. 自定义类型别名（非内置类型定义）</h2><p>下面是一些可能会经常用到，但是 TS 没有内置的一些类型别名：</p><ul><li><p>DeepReadonly</p><p>DeepReadonly 用来深度遍历 T，并将其所有属性变成只读类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type DeepReadonly&lt;T&gt; = &#123; readonly [P <span class="keyword">in</span> keyof T]: DeepReadonly&lt;T[P]&gt; &#125;</span><br></pre></td></tr></table></figure></li><li><p>ConvertNumberToString</p><p>ConvertNumberToString 用来将 number 转换为 string 类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type ConvertNumberToString&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] extends string ? string : T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ValueOf</p><p>ValueOf与keyof相对应。取出指定类型的所有 value。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ValueOf&lt;T&gt; = T[keyof T]</span><br></pre></td></tr></table></figure></li><li><p>Mutable</p><p>Mutable 用来将 T 的所有属性的 readonly 移除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Mutable&lt;T&gt; = &#123;</span><br><span class="line">  -readonly [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有对 + 和 -, 这里要说的不是变量的之间的进行加减而是对 readonly 进行加减。</p></li><li><p>PowerPartial</p><p>内置的 Partial 有个局限性，就是只支持处理第一层的属性，如果是嵌套多层的就没有效果了，不过可以如下自定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type PowerPartial&lt;T&gt; = &#123;</span><br><span class="line">  <span class="comment">// 如果是 object，则递归类型</span></span><br><span class="line">  [U <span class="keyword">in</span> keyof T]?: T[U] extends object</span><br><span class="line">    ? PowerPartial&lt;T[U]&gt;</span><br><span class="line">    : T[U]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>学习链接：</p><ul><li>英文版： <a href="https://basarat.gitbooks.io/typescript/content/#" target="_blank" rel="noopener">https://basarat.gitbooks.io/typescript/content/#</a></li><li>中文版： <a href="https://jkchao.github.io/typescript-book-chinese/#why" target="_blank" rel="noopener">https://jkchao.github.io/typescript-book-chinese/#why</a></li><li>官网： <a href="http://www.typescriptlang.org/docs/home.html" target="_blank" rel="noopener">http://www.typescriptlang.org/docs/home.html</a></li><li><a href="https://juejin.im/post/5c2f87ce5188252593122c98#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5c2f87ce5188252593122c98#heading-5</a></li><li><a href="https://github.com/chenxiaochun/blog/issues/67" target="_blank" rel="noopener">https://github.com/chenxiaochun/blog/issues/67</a></li><li><a href="https://zhuanlan.zhihu.com/p/40311981" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/40311981</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 TypeScript（下面统一简称 TS）中默认内置了很多工具泛型，能够合理灵活的使用这些工具，可以使我们的类型定义更加灵活，严谨。最近用 TS 重构了一版工程，下面是我根据自己的理解以及日常使用做的一些总结。&lt;/p&gt;
&lt;p&gt;这些泛型定义在 &lt;a href=&quot;https://github.com/microsoft/TypeScript/blob/master/lib/lib.es5.d.ts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node_modules/typescript/lib/lib.es5.d.ts&lt;/a&gt; 文件中，大概是从 1400 多行开始。所以，有兴趣也可以研究一下它们的源码实现，很有意思。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>jenkins pipeline 介绍</title>
    <link href="http://yoursite.com/2019/06/15/jenkins/"/>
    <id>http://yoursite.com/2019/06/15/jenkins/</id>
    <published>2019-06-15T03:13:25.000Z</published>
    <updated>2019-11-27T03:33:31.948Z</updated>
    
    <content type="html"><![CDATA[<p>pipeline 语法参考 <a href="https://jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noopener">https://jenkins.io/doc/book/pipeline/syntax/</a></p><h2 id="1-jenkinsfile-骨架"><a href="#1-jenkinsfile-骨架" class="headerlink" title="1. jenkinsfile 骨架"></a>1. jenkinsfile 骨架</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">      <span class="comment">// 构建的节点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">      <span class="comment">// 构建时注入的环境变量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">      <span class="comment">// 参数化构建</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  triggers &#123;</span><br><span class="line">      <span class="comment">// 构建触发器</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建阶段</span></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">'测试'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">          <span class="comment">// 测试阶段步骤</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">'构建'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建后回调，可以在success和failure中通知开发</span></span><br><span class="line">  post &#123;</span><br><span class="line">    success &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    failure &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-agent"><a href="#2-agent" class="headerlink" title="2. agent"></a>2. agent</h2><p>agent，定义构建的节点，也可以在 stage 中指定。默认 none，如果我们在 jenkins 上配置了一个 mac 节点，app 在 mac 节点上构建，那么我们可以如下声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">agent &#123;</span><br><span class="line">  node &#123;</span><br><span class="line">    label: <span class="string">'mac'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-environment"><a href="#3-environment" class="headerlink" title="3. environment"></a>3. environment</h2><p>可以在 environment 中注入构建时的环境变量。如我们构建时使用指定路径的 nodejs：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">environment &#123;</span><br><span class="line">  PATH = <span class="string">"$&#123;PATH&#125;:$&#123;HOME&#125;/.nvm/versions/node/v8.11.1/bin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了可以在 environment 中声明环境变量外，还可以在 <a href="http://groovy-lang.org/syntax.html" target="_blank" rel="noopener">groovy</a> 脚本中添加或修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script &#123;</span><br><span class="line">  env.DOCKER_HOST=<span class="string">'tcp://192.168.71.86:2376'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-parameters"><a href="#4-parameters" class="headerlink" title="4. parameters"></a>4. parameters</h2><p>有时候我们需要参数化构建，如选择构建的环境，也可以通过 jenkinsfile 定义。下面示例提供了两个选择框，可以选择部署的环境和部署类型。需要注意的是，选择框的第一个为默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">  choice(name: <span class="string">'DEPLOY_ENV'</span>, <span class="attr">choices</span>: [<span class="string">'test'</span>, <span class="string">'demo'</span>, <span class="string">'production'</span>], <span class="attr">description</span>: <span class="string">'选择部署环境'</span>);</span><br><span class="line"></span><br><span class="line">  choice(name: <span class="string">'DEPLOY_TYPE'</span>, <span class="attr">choices</span>: [<span class="string">'部署'</span>, <span class="string">'回滚'</span>], <span class="attr">description</span>: <span class="string">'选择部署类型'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多输入类型参考 <a href="https://jenkins.io/doc/book/pipeline/syntax/#parameters" target="_blank" rel="noopener">https://jenkins.io/doc/book/pipeline/syntax/#parameters</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">  string(name: <span class="string">'PERSON'</span>, <span class="attr">defaultValue</span>: <span class="string">'Mr Jenkins'</span>, <span class="attr">description</span>: <span class="string">'Who should I say hello to?'</span>)</span><br><span class="line"></span><br><span class="line">  text(name: <span class="string">'BIOGRAPHY'</span>, <span class="attr">defaultValue</span>: <span class="string">''</span>, <span class="attr">description</span>: <span class="string">'Enter some information about the person'</span>)</span><br><span class="line"></span><br><span class="line">  booleanParam(name: <span class="string">'TOGGLE'</span>, <span class="attr">defaultValue</span>: <span class="literal">true</span>, <span class="attr">description</span>: <span class="string">'Toggle this value'</span>)</span><br><span class="line"></span><br><span class="line">  choice(name: <span class="string">'CHOICE'</span>, <span class="attr">choices</span>: [<span class="string">'One'</span>, <span class="string">'Two'</span>, <span class="string">'Three'</span>], <span class="attr">description</span>: <span class="string">'Pick something'</span>)</span><br><span class="line"></span><br><span class="line">  password(name: <span class="string">'PASSWORD'</span>, <span class="attr">defaultValue</span>: <span class="string">'SECRET'</span>, <span class="attr">description</span>: <span class="string">'Enter a password'</span>)</span><br><span class="line"></span><br><span class="line">  file(name: <span class="string">"FILE"</span>, <span class="attr">description</span>: <span class="string">"Choose a file to upload"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-triggers"><a href="#5-triggers" class="headerlink" title="5. triggers"></a>5. triggers</h2><p>当然，也可以在 jenkinsfile 上定义任务的触发器，内部提供了 cron, pollSCM 和 upstream 三种类型的触发器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line"> cron(<span class="string">'H */4 * * 1-5'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了内置触发器外，许多插件也提供了触发器，比如 Generic Webhook Trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger(</span><br><span class="line">    genericVariables: [     <span class="comment">// 从参数中取值</span></span><br><span class="line">      [key: <span class="string">'ref'</span>, <span class="attr">value</span>: <span class="string">'$.ref'</span>]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    causeString: <span class="string">'Triggered on $ref'</span>,</span><br><span class="line"></span><br><span class="line">    token: <span class="string">'test_imservice_ci'</span>, <span class="comment">// 只有 url 中的 token=test_imservice_ci 才会触发</span></span><br><span class="line"></span><br><span class="line">    printContributedVariables: <span class="literal">true</span>,</span><br><span class="line">    printPostContent: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    regexpFilterText: <span class="string">'$ref'</span>,</span><br><span class="line">    regexpFilterExpression: <span class="string">'refs/heads/'</span> + BRANCH_NAME <span class="comment">// 当 ref 为当前分支时才构建</span></span><br><span class="line">    <span class="comment">// 注： 只在多分支流水线项目中才包含 BRANCH_NAME 字段</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-stages"><a href="#6-stages" class="headerlink" title="6. stages"></a>6. stages</h2><p>stages 中的 stage 会显示在 jenkins 任务主页中的 Stage View 中。每个 stage 可以有很多个 steps，我们可以执行构建命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'打印环境变量'</span>) &#123;</span><br><span class="line">  steps &#123;</span><br><span class="line">    sh <span class="string">"printenv"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不知道支持哪些流水线脚本，可以在任务主页中点击【Pipeline Syntax】进入页面，选择示例步骤，生成流水线脚本。</p><p>当然，可以在 steps 中使用 script 支持 <a href="http://groovy-lang.org/syntax.html" target="_blank" rel="noopener">groovy</a> 脚本。比如以下脚本，在不同构建环境下设置不同的环境变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'设置network'</span>) &#123;</span><br><span class="line">  steps &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">      <span class="keyword">if</span> (env.DEPLOY_ENV == <span class="string">'test'</span>) &#123;</span><br><span class="line">          env.NETWORK=<span class="string">'host'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          env.NETWORK=<span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sh <span class="string">'printenv'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-post"><a href="#7-post" class="headerlink" title="7. post"></a>7. post</h2><p>构建完成功或失败后，会触发后置处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">post &#123;</span><br><span class="line">  success &#123;</span><br><span class="line">    sh <span class="string">'printenv'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  failure &#123;</span><br><span class="line">    echo <span class="string">'build error'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8. 字符串"></a>8. 字符串</h2><p>groovy 有多种字符串定义的方式，只有双引号字符串可以插入参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello, world'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"hello, $&#123;PARAMS&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  hello,</span></span><br><span class="line"><span class="string">  world!</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  hello,</span></span><br><span class="line"><span class="string">  $&#123;PARAMS&#125;</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure><h2 id="9-钉钉群通知"><a href="#9-钉钉群通知" class="headerlink" title="9. 钉钉群通知"></a>9. 钉钉群通知</h2><ul><li><p>声明钉钉机器人 url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">environment &#123;</span><br><span class="line">  DINGDING_ROBOT_URL = <span class="string">'https://oapi.dingtalk.com/robot/send?access_token=123456'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将通知信息拼接成钉钉支持的格式，使用 curl 发送，参考 <a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq</a></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">post &#123;</span><br><span class="line">  success &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">      def markdown = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        #### "</span>$&#123;env.JOB_NAME&#125; 部署成功 [$&#123;env.BUILD_NUMBER&#125;]<span class="string">"</span></span><br><span class="line"><span class="string">      "</span><span class="string">""</span></span><br><span class="line">      def json = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "</span>msgtype<span class="string">": "</span>markdown<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>markdown<span class="string">": &#123;</span></span><br><span class="line"><span class="string">              "</span>title<span class="string">": "</span>杭州天气<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>text<span class="string">": "</span>$&#123;markdown&#125;<span class="string">"</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      "</span><span class="string">""</span></span><br><span class="line">      sh <span class="string">"curl -H 'Content-Type:application/json' -X POST --data '$&#123;json&#125;' $&#123;DINGDING_ROBOT_URL&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好能够将上面的 json 拼接抽象成函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  post &#123;</span><br><span class="line">    success &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        def json = buildJSON(<span class="string">'构建成功'</span>, <span class="string">'#### 构建成功...'</span>)</span><br><span class="line">        sh <span class="string">"curl -H 'Content-Type:application/json' -X POST --data '$&#123;json&#125;' $&#123;DINGDING_ROBOT_URL&#125;"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def buildJSON(title, markdown) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "</span>msgtype<span class="string">": "</span>markdown<span class="string">",</span></span><br><span class="line"><span class="string">      "</span>markdown<span class="string">":&#123;</span></span><br><span class="line"><span class="string">        "</span>title<span class="string">": "</span>$&#123;title&#125;<span class="string">",</span></span><br><span class="line"><span class="string">        "</span>text<span class="string">":"</span>$&#123;markdown&#125;<span class="string">"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-常见问题"><a href="#10-常见问题" class="headerlink" title="10. 常见问题"></a>10. 常见问题</h2><ul><li><p>构建异常 failed to unshare namespaces: Cannot allocate memory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[91mnsenter: failed to unshare namespaces: Cannot allocate memory</span><br><span class="line">[0m[91mcontainer_linux.go:262: starting container process caused &quot;process_linux.go:247: running exec setns process for init caused \&quot;exit status 34\&quot;&quot;</span><br><span class="line">[0moci runtime error: container_linux.go:262: starting container process caused &quot;process_linux.go:247: running exec setns process for init caused \&quot;exit status 34\&quot;&quot;</span><br></pre></td></tr></table></figure><p>解决方案：连接 jenkins 服务器，执行  echo 1 &gt; /proc/sys/vm/drop_caches 释放内存</p></li><li><p>待更新。。</p></li></ul><p>学习链接：</p><ul><li><a href="https://jenkins.io/zh/doc/book/pipeline/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/pipeline/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pipeline 语法参考 &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/syntax/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jenkins.io/doc/book/pipeline/syntax/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-jenkinsfile-骨架&quot;&gt;&lt;a href=&quot;#1-jenkinsfile-骨架&quot; class=&quot;headerlink&quot; title=&quot;1. jenkinsfile 骨架&quot;&gt;&lt;/a&gt;1. jenkinsfile 骨架&lt;/h2&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="jenkins" scheme="http://yoursite.com/tags/jenkins/"/>
    
      <category term="linus" scheme="http://yoursite.com/tags/linus/"/>
    
  </entry>
  
  <entry>
    <title>svg-animate动画</title>
    <link href="http://yoursite.com/2019/05/26/svg-animate/"/>
    <id>http://yoursite.com/2019/05/26/svg-animate/</id>
    <published>2019-05-26T12:12:03.000Z</published>
    <updated>2019-11-25T10:05:30.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h2><a id="more"></a><ul><li>attributeName： 定义发生变化的属性名</li><li>attributeType： 当 attributeType=”XML” 时，attributeName 被认为是 XML 的属性；当 attributeType=”CSS” 时，attributeName 被认为是 css 的属性；不指定 attributeType 时，默认为 “auto”, 会将 attributeName 作为 css 的属性，如果无效，再将 attributeName 作为 XML 的属性</li><li>from、to、by：from 和 to 分别定义发生变化的属性的初始值和终止值。from 可缺省，表示初始值即为 animate 父元素相应的属性值。可用 by 替换 to，表示变化偏移量，可以理解为 to = from + by</li><li>begin dur end：begin 定义动画开始时间，dur 定义动画所需时间，end 定义动画终止时间。时间单位 h：小时；min：分钟；s：秒；ms：毫秒。默认时间单位为 s。</li><li>fill：当 fill=”freeze” 时，动画终止时，发生变化的元素属性值停留在动画终止时的状态；当 fill=”remove” 时，动画终止时，发生变化的元素属性值回复到动画终起始时的状态。默认属性值为 remove。</li><li>repeatCount： indefinite 无限循环</li></ul><h2 id="2-animateTransform"><a href="#2-animateTransform" class="headerlink" title="2. animateTransform"></a>2. animateTransform</h2><ul><li>实现 transform 属性改变的动画，animateTransform 来代替 animate 元素</li><li>type 属性指定需要改变的属性，如 translate scale rotate skewX skewY 等</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 200 200'</span> <span class="attr">width</span>=<span class="string">'600'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">'10'</span> <span class="attr">y</span>=<span class="string">'10'</span> <span class="attr">width</span>=<span class="string">'20'</span> <span class="attr">height</span>=<span class="string">'20'</span> <span class="attr">fill</span>=<span class="string">'red'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'width'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">from</span>=<span class="string">'20'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">to</span>=<span class="string">'300'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'3s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill</span>=<span class="string">'freeze'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'height'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">from</span>=<span class="string">'20'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">to</span>=<span class="string">'200'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'3s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill</span>=<span class="string">'freeze'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'fill'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeType</span>=<span class="string">'XML'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">values</span>=<span class="string">'red; yellow; orange'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'3s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill</span>=<span class="string">'freeze'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animateTransform</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'transform'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">'scale'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeType</span>=<span class="string">'XML'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">from</span>=<span class="string">'1'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">to</span>=<span class="string">'0.2'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'3s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill</span>=<span class="string">'freeze'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"this.click()"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-50 -50 100 100'</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">click</span>=<span class="string">"this.clickSvg()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">'10'</span> <span class="attr">cy</span>=<span class="string">'0'</span> <span class="attr">r</span>=<span class="string">'6'</span> <span class="attr">fill</span>=<span class="string">'red'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'opacity'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">values</span>=<span class="string">'0.8;0.8;0.6;0.4;0.6;0.8;0.8'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'1.2s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">repeatCount</span>=<span class="string">'indefinite'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">'-10'</span> <span class="attr">cy</span>=<span class="string">'0'</span> <span class="attr">r</span>=<span class="string">'6'</span> <span class="attr">fill</span>=<span class="string">'red'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'opacity'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">values</span>=<span class="string">'0.8;0.8;0.8;0.4;0.8;0.8;0.8'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'1.2s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">begin</span>=<span class="string">'0.5'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">repeatCount</span>=<span class="string">'indefinite'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">'0'</span> <span class="attr">cy</span>=<span class="string">'10'</span> <span class="attr">r</span>=<span class="string">'6'</span> <span class="attr">fill</span>=<span class="string">'red'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'opacity'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">values</span>=<span class="string">'0.8;0.8;0.6;0.4;0.6;0.8;0.8'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'1.2s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">begin</span>=<span class="string">'0.25'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">repeatCount</span>=<span class="string">'indefinite'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">'0'</span> <span class="attr">cy</span>=<span class="string">'-10'</span> <span class="attr">r</span>=<span class="string">'6'</span> <span class="attr">fill</span>=<span class="string">'red'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span></span></span><br><span class="line"><span class="tag">      <span class="attr">attributeName</span>=<span class="string">'opacity'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">values</span>=<span class="string">'0.8;0.8;0.6;0.4;0.6;0.8;0.8'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dur</span>=<span class="string">'1.2s'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">begin</span>=<span class="string">'0.75'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">repeatCount</span>=<span class="string">'indefinite'</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-animateMotion"><a href="#3-animateMotion" class="headerlink" title="3. animateMotion"></a>3. animateMotion</h2><ul><li>animateMotion 可以让父元素沿着指定的路径运动</li><li>路径使用和 <code>&lt;path&gt;</code> 相同的方式进行定义</li><li>rotate 可以设置是否根据路径的正切角度来旋转</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 400 400'</span> <span class="attr">width</span>=<span class="string">'600'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"0"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"15"</span> <span class="attr">fill</span>=<span class="string">"red"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M 0 0 H 300 Z"</span> <span class="attr">dur</span>=<span class="string">"3s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-150 -150 800 800'</span> <span class="attr">width</span>=<span class="string">'600'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"0"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"15"</span> <span class="attr">fill</span>=<span class="string">"red"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M 0 0 H 300 Z"</span> <span class="attr">dur</span>=<span class="string">"3s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">'0'</span> <span class="attr">y</span>=<span class="string">'80'</span> <span class="attr">height</span>=<span class="string">'20'</span> <span class="attr">width</span>=<span class="string">'20'</span> <span class="attr">rx</span>=<span class="string">'3'</span> <span class="attr">fill</span>=<span class="string">"red"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M40 40, L160 80, L20 100, Z"</span> <span class="attr">dur</span>=<span class="string">"3s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">'0'</span> <span class="attr">y</span>=<span class="string">'140'</span> <span class="attr">height</span>=<span class="string">'20'</span> <span class="attr">width</span>=<span class="string">'20'</span> <span class="attr">rx</span>=<span class="string">'3'</span> <span class="attr">fill</span>=<span class="string">"red"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">path</span>=<span class="string">"M50 50, A50 50 0 0 0 150 150, A50 50 0 1 0 50 50"</span> <span class="attr">dur</span>=<span class="string">"3s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> <span class="attr">rotate</span>=<span class="string">"auto"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-属性&quot;&gt;&lt;a href=&quot;#1-属性&quot; class=&quot;headerlink&quot; title=&quot;1. 属性&quot;&gt;&lt;/a&gt;1. 属性&lt;/h2&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>svg-引用、裁剪、蒙版</title>
    <link href="http://yoursite.com/2019/05/12/svg-%E5%BC%95%E7%94%A8%E8%A3%81%E5%89%AA%E8%92%99%E7%89%88/"/>
    <id>http://yoursite.com/2019/05/12/svg-引用裁剪蒙版/</id>
    <published>2019-05-12T08:25:41.000Z</published>
    <updated>2019-11-25T09:38:02.917Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>&lt;use&gt;</code>：创建图形引用</li><li><code>&lt;clipPath&gt;</code>：裁剪图形</li><li><code>&lt;mask&gt;</code>：创建蒙版</li></ul><h2 id="1-lt-use-gt"><a href="#1-lt-use-gt" class="headerlink" title="1. &lt;use&gt;"></a>1. <code>&lt;use&gt;</code></h2><a id="more"></a><ul><li><code>&lt;use&gt;</code> 标签可以绘制重复的图形元素</li><li>使用 xlink:href 属性引用图形，xlink:href = “#id”</li><li>原型已经设置的属性，引用会继承，并且不能覆盖</li></ul><h2 id="2-lt-clipPath-gt"><a href="#2-lt-clipPath-gt" class="headerlink" title="2. &lt;clipPath&gt;"></a>2. <code>&lt;clipPath&gt;</code></h2><ul><li>该标签用于定义剪切路径，标签内可创建任意数量的基本形状</li><li>图形使用 clip-path 属性来引用 clipPath 来做裁切，clip-path=”url(#clip-id)”、</li><li>clip-rule 用于确定哪些点是属于裁剪路径内部的点</li><li>所有在裁剪路径中的图形都可见，所有在裁剪路径外的图形都不可见</li></ul><h2 id="3-lt-mask-gt"><a href="#3-lt-mask-gt" class="headerlink" title="3. &lt;mask&gt;"></a>3. <code>&lt;mask&gt;</code></h2><ul><li>蒙版（mask）是一种容器，它定义了一组图形，并将他们作为半透明的媒介，可以用来组合前景对象和背景</li><li>蒙版可以指定不同位置的透明度（裁剪路径要么是全透明，要么不可见）</li><li>蒙版的效果，基本就是根据蒙版中每个点的颜色和透明度计算出一个最终的透明度，然后在渲染对象的时候，在对象上面罩上这个带有不同透明度的蒙版层，体现出蒙版的遮挡效果</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;：创建图形引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;：裁剪图形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt;：创建蒙版&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-lt-use-gt&quot;&gt;&lt;a href=&quot;#1-lt-use-gt&quot; class=&quot;headerlink&quot; title=&quot;1. &amp;lt;use&amp;gt;&quot;&gt;&lt;/a&gt;1. &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>svg-文本</title>
    <link href="http://yoursite.com/2019/05/05/svg-%E6%96%87%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/05/05/svg-文本/</id>
    <published>2019-05-05T07:22:03.000Z</published>
    <updated>2019-11-25T09:05:03.361Z</updated>
    
    <content type="html"><![CDATA[<p>svg 可以使用 <code>&lt;text&gt;</code>、<code>&lt;tspan&gt;</code> 来创建文本。</p><h2 id="1-位置"><a href="#1-位置" class="headerlink" title="1. 位置"></a>1. 位置</h2><ul><li>x、y 决定了文本在视图中显示的位置</li><li>dx、dy 用于设置文本相对于当前位置的偏移量</li><li><p>如果 dx、dy 的值是多个值，则从第二个值开始，表示文本内字符的间距</p><a id="more"></a><h2 id="2-对齐"><a href="#2-对齐" class="headerlink" title="2. 对齐"></a>2. 对齐</h2></li><li><p>text-anchor： 设置水平对齐，包括：start middle end inherit</p></li><li>dominant-baseline： 设置垂直对齐，包括：auto central middle text-before-edge text-after-edge…</li></ul><h2 id="3-样式"><a href="#3-样式" class="headerlink" title="3. 样式"></a>3. 样式</h2><ul><li>可以使用：fill stroke stroke-width opacity 等 svg 属性</li><li>可以使用：font-family、font-style、font-weight、font-variant、font-stretch、font-size、font-size-adjust、kerning、letter-spacing、word-spacing、text-decoration 等属性</li></ul><h2 id="4-tspan"><a href="#4-tspan" class="headerlink" title="4. tspan"></a>4. tspan</h2><ul><li>tspan 必须是一个 text 元素或其他 tspan 元素的子元素</li><li>x 为容器设置一个新绝对 x 坐标，它覆盖了默认的当前的文本位置。这个属性可以包含一个数列，他们将一个一个的应用到 tspan 元素内的每一个字符上（y 同理）</li><li>dx 从当前位置，用一个水平偏移开始绘制文本。这里，可以提供一个值数列，可以应用到连续的字体，因此每次累计一个偏移（dy 同理）</li><li>rotate 把所有字符旋转一个角度。如果是一个数列，则使每个字符分别旋转到那个值，剩下的字符根据最后一个值旋转</li></ul><h2 id="5-textPath"><a href="#5-textPath" class="headerlink" title="5. textPath"></a>5. textPath</h2><ul><li>元素利用路径文本 textPath 的 xlink:href 属性取得一个任意路径，把字符对齐到路径</li><li>使用 textPath 时， x 位置路径，y 无效</li><li>startOffset 确定排列的起始位置</li></ul><h2 id="6-示例"><a href="#6-示例" class="headerlink" title="6. 示例"></a>6. 示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 800 200'</span> <span class="attr">width</span>=<span class="string">'800'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"60 20, 60 80"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">text-anchor</span>=<span class="string">"start"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">text-anchor</span>=<span class="string">"start"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"80"</span> <span class="attr">text-anchor</span>=<span class="string">"end"</span>&gt;</span>end<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"10 150, 790 150"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"start"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"start"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"50"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"central"</span>&gt;</span>central<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"120"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"180"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"text-before-edge"</span>&gt;</span>text-before-edge<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"text-after-edge"</span>&gt;</span>text-after-edge<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"380"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"no-change"</span>&gt;</span>no-change<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"470"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"hanging"</span>&gt;</span>hanging<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"530"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"reset-size"</span>&gt;</span>reset-size<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"620"</span> <span class="attr">y</span>=<span class="string">"150"</span> <span class="attr">dominant-baseline</span>=<span class="string">"ideographic"</span>&gt;</span>ideographic<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 400 200'</span> <span class="attr">width</span>=<span class="string">'400'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">'20'</span> <span class="attr">y</span>=<span class="string">'50'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">font-size</span>=<span class="string">'60px'</span> <span class="attr">font-weight</span>=<span class="string">'bold'</span> <span class="attr">fill</span>=<span class="string">'none'</span> <span class="attr">letter-spacing</span>=<span class="string">'3'</span> <span class="attr">stroke-width</span>=<span class="string">'0.5'</span>&gt;</span>leo<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">'20'</span> <span class="attr">y</span>=<span class="string">'100'</span> <span class="attr">font-size</span>=<span class="string">'18'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">font-weight</span>=<span class="string">"bold"</span> <span class="attr">font-size</span>=<span class="string">'30'</span>&gt;</span>leo<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span>weiy</span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">    leo<span class="tag">&lt;<span class="name">tspan</span> <span class="attr">x</span>=<span class="string">"100 100"</span> <span class="attr">y</span>=<span class="string">"150 130 110"</span> <span class="attr">dx</span>=<span class="string">"0 10 10 10 10 10"</span> <span class="attr">dy</span>=<span class="string">'0 10 10'</span> <span class="attr">rotate</span>=<span class="string">"15 15 60"</span> <span class="attr">font-size</span>=<span class="string">'20'</span> <span class="attr">font-weight</span>=<span class="string">"bold"</span> &gt;</span>weiy<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 400 200'</span> <span class="attr">width</span>=<span class="string">'400'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">"my_path"</span> <span class="attr">d</span>=<span class="string">"M20 40, Q100 100 200 40"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">'10'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">startOffset</span>=<span class="string">'10%'</span> <span class="attr">xlink:href</span>=<span class="string">"#my_path"</span>&gt;</span>casstime bricks<span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>学习链接</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Texts" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Texts</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;svg 可以使用 &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;tspan&amp;gt;&lt;/code&gt; 来创建文本。&lt;/p&gt;
&lt;h2 id=&quot;1-位置&quot;&gt;&lt;a href=&quot;#1-位置&quot; class=&quot;headerlink&quot; title=&quot;1. 位置&quot;&gt;&lt;/a&gt;1. 位置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x、y 决定了文本在视图中显示的位置&lt;/li&gt;
&lt;li&gt;dx、dy 用于设置文本相对于当前位置的偏移量&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 dx、dy 的值是多个值，则从第二个值开始，表示文本内字符的间距&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>svg-path</title>
    <link href="http://yoursite.com/2019/04/28/svg-path/"/>
    <id>http://yoursite.com/2019/04/28/svg-path/</id>
    <published>2019-04-28T11:22:52.000Z</published>
    <updated>2019-11-25T09:05:38.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>path 字符串由一系列命令序列组成，序列的首字母表示命令类型，后面跟的是命令的坐标值或命令的设定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0, 0 L10, 20 C30-10, 40,20,100,100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 0 L10 20 C30 -10 40 20 100 100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 0, L10 20, C30 10, 40 20 100 100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/d" target="_blank" rel="noopener">d</a> 实际上是一个字符串，包含了一系列路径描述。</p><h2 id="2-命令"><a href="#2-命令" class="headerlink" title="2. 命令"></a>2. 命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>M/m(x,y)+</td><td>移动当前位置</td></tr><tr><td>L/l(x,y)+</td><td>从当前位置绘制线段到指定位置</td></tr><tr><td>H/h(x)+</td><td>从当前位置绘制水平线到达指定的 x 坐标</td></tr><tr><td>V/v(y)+</td><td>从当前位置绘制竖直线到指定的 y 坐标</td></tr><tr><td>Z/z</td><td>闭合当前路径</td></tr><tr><td>C/c(x1,y1,x2,y2,x,y)+</td><td>从当前位置绘制三次贝塞尔曲线到指定位置</td></tr><tr><td>S/s(x2,y2,x,y)+</td><td>从当前位置光滑绘制三次贝塞尔曲线到指定位置</td></tr><tr><td>Q/q(x1,y1,x,y)+</td><td>从当前位置绘制二次贝塞尔曲线到指定位置</td></tr><tr><td>T/t(x,y)+</td><td>从当前位置光滑绘制二次贝塞尔曲线到指定位置</td></tr><tr><td>A/a(rx,ry,xr,laf,sf,x,y)</td><td>从当前位置绘制弧线到指定位置</td></tr></tbody></table><ul><li>区分大小写，大写表示坐标参数为绝对位置，小写则为相对位置</li><li>最后的参数表示最终要到达的位置</li><li>上一个命令结束的位置就是下一个命令开始的位置</li><li>命令可以重复参数，表示重复执行同一条命令</li></ul><h2 id="3-直线命令"><a href="#3-直线命令" class="headerlink" title="3. 直线命令"></a>3. 直线命令</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 400 400'</span> <span class="attr">width</span>=<span class="string">'400'</span> <span class="attr">height</span>=<span class="string">'400'</span> <span class="attr">style</span>=<span class="string">'border: 1px</span></span></span><br><span class="line"><span class="tag"><span class="string">solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M10 10, L80 80'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M10 100, H200'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M80 120, V180'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M80 200, L200 260, L40 220, Z'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-弧线命令"><a href="#4-弧线命令" class="headerlink" title="4. 弧线命令"></a>4. 弧线命令</h2><p>A(rx, ry, xr, laf, sf, x, y) - 绘制弧线</p><ul><li>rx - (radius-x) 弧线所在椭圆的 x 半轴长</li><li>ry - (radius-y) 弧线所在椭圆的 y 半轴长</li><li>xr - (xAxis-rotation) 弧线所在椭圆的长轴角度</li><li>laf - (large-arc-flag) 是否选择弧长较长的那段弧</li><li>sf - (sweep-flag) 是否选择逆时针方向的那段弧</li><li>x, y - 弧的终点位置</li></ul><p><img src="/images/svg-3.png" alt="svg-3"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 200 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M50 50, A50 50 0 0 0 150 150, A50 50 0 1 0 50 50'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 200 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M50 50, A40 30 0 0 0 150 150, A40 30 0 1 0 50 50'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-贝塞尔曲线"><a href="#5-贝塞尔曲线" class="headerlink" title="5. 贝塞尔曲线"></a>5. 贝塞尔曲线</h2><p><a href="https://www.zhangxinxu.com/wordpress/2014/06/deep-understand-svg-path-bezier-curves-command/" target="_blank" rel="noopener">介绍</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-10 0 220 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 100, Q100 0 200 100 '</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-10 0 220 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 100, Q20 0 200 100 '</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-10 0 220 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 100, Q180 0 200 100 '</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-10 0 220 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 100, C20 0 100 200 200 100 '</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'-10 0 220 200'</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'200'</span> <span class="attr">style</span>=<span class="string">'border: 1px solid green'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">'M0 100, T20 30 100 100 200 100 '</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>学习链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;p&gt;path 字符串由一系列命令序列组成，序列的首字母表示命令类型，后面跟的是命令的坐标值或命令的设定。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;M0, 0 L10, 20 C30-10, 40,20,100,100&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;M0 0 L10 20 C30 -10 40 20 100 100&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;M0 0, L10 20, C30 10, 40 20 100 100&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>svg-元素与属性</title>
    <link href="http://yoursite.com/2019/04/26/svg-%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2019/04/26/svg-元素与属性/</id>
    <published>2019-04-26T10:12:05.000Z</published>
    <updated>2019-11-25T07:21:01.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h2><a id="more"></a><ul><li><code>&lt;svg&gt;</code>：包裹并定义整个矢量图；</li><li><code>&lt;line&gt;</code>：创建一条直线；</li><li><code>&lt;polyline&gt;</code>：创建折线；</li><li><code>&lt;polygon&gt;</code>：创建多边形；</li><li><code>&lt;rect&gt;</code>：创建矩形；</li><li><code>&lt;circle&gt;</code>：创建圆形；</li><li><code>&lt;ellipse&gt;</code>：创建圆形和椭圆；</li><li><code>&lt;g&gt;</code>：将多种形状组合起来。将组合后的形状置于 <code>&lt;defs&gt;</code> 中可以让它能够被复用；</li><li><code>&lt;text&gt;、&lt;tspan&gt;</code>：创建文本元素；</li><li><code>&lt;path&gt;</code>：通过指定点以及点与点之间的线来创建任意形状；</li><li><code>&lt;defs&gt;</code>：在 defs 元素中定义的图形元素不会直接呈现，建议将引用的元素定义在 <code>&lt;defs&gt;</code> 里；</li><li><code>&lt;use&gt;</code>：获取在 <code>&lt;defs&gt;</code> 中定义的复用对象并在 svg 中显示出来；</li><li><code>&lt;clipPath&gt;</code>：指定可绘制区域，当绘制的图形超出了剪切路径所指定的区域，超出区域的部分将不会被绘制；</li><li><code>&lt;mask&gt;</code>：用于定义遮罩元素，可以带有透明度；</li></ul><h2 id="2-属性"><a href="#2-属性" class="headerlink" title="2. 属性"></a>2. 属性</h2><ul><li>fill：颜色填充； 例如： fill=”#ff0”</li><li>stroke：描边的颜色； 例如：stroke=”#ff0”</li><li>stroke-width：描边宽度； 例如：stroke-width=2</li><li>opacity：透明度； 例如：opacity=”0.2”</li><li>transform： 变形； 例如：transform=”rotate(30deg)”</li></ul><h2 id="3-基础图形实例和分析"><a href="#3-基础图形实例和分析" class="headerlink" title="3. 基础图形实例和分析"></a>3. 基础图形实例和分析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">'0 0 800 400'</span> <span class="attr">width</span>=<span class="string">'800'</span> <span class="attr">height</span>=<span class="string">'400'</span> <span class="attr">style</span>=<span class="string">'border: 1px</span></span></span><br><span class="line"><span class="tag"><span class="string">solid green'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">'0'</span> <span class="attr">y1</span>=<span class="string">'0'</span> <span class="attr">x2</span>=<span class="string">'100'</span> <span class="attr">y2</span>=<span class="string">'100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">'100 150 150 150 150 100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">'200 250 250 250 250 100'</span> <span class="attr">stroke</span>=<span class="string">'red'</span> <span class="attr">fill</span>=<span class="string">'none'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">'300'</span> <span class="attr">y</span>=<span class="string">'80'</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">height</span>=<span class="string">'50'</span> <span class="attr">fill</span>=<span class="string">'red'</span> <span class="attr">rx</span>=<span class="string">'10'</span></span></span><br><span class="line"><span class="tag"><span class="attr">ry</span>=<span class="string">'20'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">'400'</span> <span class="attr">cy</span>=<span class="string">'200'</span> <span class="attr">r</span>=<span class="string">'50'</span> <span class="attr">fill</span>=<span class="string">'red'</span> <span class="attr">opacity</span>=<span class="string">'0.3'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">'550'</span> <span class="attr">cy</span>=<span class="string">'200'</span> <span class="attr">rx</span>=<span class="string">'80'</span> <span class="attr">ry</span>=<span class="string">'30'</span> <span class="attr">fill</span>=<span class="string">'red'</span> <span class="attr">opacity</span>=<span class="string">'0.8'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>学习链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-标签&quot;&gt;&lt;a href=&quot;#1-标签&quot; class=&quot;headerlink&quot; title=&quot;1. 标签&quot;&gt;&lt;/a&gt;1. 标签&lt;/h2&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>svg-概述</title>
    <link href="http://yoursite.com/2019/04/18/svg-%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/04/18/svg-概述/</id>
    <published>2019-04-18T05:26:00.000Z</published>
    <updated>2019-11-25T03:49:30.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul><li>可缩放矢量图形（Scalable Vector Graphics，SVG），是一种用于描述基于二维的矢量图形的，基于 XML 的标记语言。本质上，SVG 相对于图像，就好比 HTML 相对于文本;</li><li>文件后缀是 .svg；</li><li>namespace 是 <a href="http://www.w3.org/2000/svg" target="_blank" rel="noopener">http://www.w3.org/2000/svg</a>；</li></ul><h2 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h2><a id="more"></a><ul><li>可被非常多的工具读取和修改；</li><li>相对 jpg, png 尺寸更小，切可压缩性更强；</li><li>可伸缩；</li><li>可在图像质量不降低的情况下被放大；</li><li>文本是可以搜索的；</li></ul><h2 id="3-兼容性"><a href="#3-兼容性" class="headerlink" title="3. 兼容性"></a>3. 兼容性</h2><p><img src="/images/svg-1.png" alt="svg-1"></p><h2 id="4-坐标系统"><a href="#4-坐标系统" class="headerlink" title="4. 坐标系统"></a>4. 坐标系统</h2><p>对于所有元素，SVG使用的坐标系统或者说网格系统，和Canvas用的差不多（所有计算机绘图都差不多）。这种坐标系统是：</p><p>以页面的左上角为(0,0)坐标点，坐标以像素为单位，x 轴正方向是向右，y 轴正方向是向下。注意，这和你小时候所教的绘图方式是相反的。但是在HTML文档中，元素都是用这种方式定位的。</p><p><img src="/images/svg-2.png" alt="svg-2"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>SVG中的四个坐标系包括用户坐标系、自身坐标系、前驱坐标系和参考坐标系。其中，用户坐标系和自身坐标系是客观的坐标系，而前驱坐标系和参考坐标系是相对的坐标系</p><ul><li>用户坐标系：即世界坐标系，svg 坐标系本身；</li><li>自身坐标系：图形或图形分组的坐标系；</li><li>前驱坐标系：父容器的坐标系；svg 的前驱坐标系是世界坐标系；</li><li>参考坐标系：参考其他坐标系来判断自身的情况时使用；</li></ul><h2 id="5-基础概念"><a href="#5-基础概念" class="headerlink" title="5. 基础概念"></a>5. 基础概念</h2><ul><li>视窗：在 svg 标签上设置 width、 height 来控制视窗(viewport)；</li><li>世界： svg 代码定义的世界；</li><li>视野：世界是无穷大的，视野是观察世界的一个矩形区域；在 svg 中，提供了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/viewBox" target="_blank" rel="noopener">viewBox</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/preserveAspectRatio" target="_blank" rel="noopener">preserveAspectRatio</a> 属性来控制视野；</li></ul><h2 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h2><ul><li>img、iframe、object等标签插入网页；</li><li>css 使用；</li><li>直接插入网页；</li><li>网页直接打开；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"demo.svg"</span> /&gt;</span><br><span class="line">&lt;iframe src=<span class="string">"demo.svg"</span> /&gt;</span><br><span class="line">&lt;object src=<span class="string">"demo.svg"</span> type=<span class="string">"image/svg+xml"</span> /&gt;</span><br><span class="line">.demo &#123;</span><br><span class="line">  background: url(demo.svg);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;<span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;svg</span><br><span class="line">        xmlns=<span class="string">"http://www.w3.org/2000/svg"</span></span><br><span class="line">        viewBox=<span class="string">"0 0 80 60"</span></span><br><span class="line">        preserveAspectRatio=<span class="string">"xMidYMid meet"</span></span><br><span class="line">      &gt;</span><br><span class="line">        &lt;circle cx=<span class="string">"40"</span> cy=<span class="string">"30"</span> r=<span class="string">"5"</span> /&gt;</span><br><span class="line">      &lt;svg&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="7-实际应用"><a href="#7-实际应用" class="headerlink" title="7. 实际应用"></a>7. 实际应用</h2><ul><li>iconfont</li><li>highCharts</li><li>D3.js</li></ul><p>学习链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG</a></li><li><a href="https://www.cnblogs.com/xiaohuochai/p/7482765.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohuochai/p/7482765.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可缩放矢量图形（Scalable Vector Graphics，SVG），是一种用于描述基于二维的矢量图形的，基于 XML 的标记语言。本质上，SVG 相对于图像，就好比 HTML 相对于文本;&lt;/li&gt;
&lt;li&gt;文件后缀是 .svg；&lt;/li&gt;
&lt;li&gt;namespace 是 &lt;a href=&quot;http://www.w3.org/2000/svg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.w3.org/2000/svg&lt;/a&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-优点&quot;&gt;&lt;a href=&quot;#2-优点&quot; class=&quot;headerlink&quot; title=&quot;2. 优点&quot;&gt;&lt;/a&gt;2. 优点&lt;/h2&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
</feed>
